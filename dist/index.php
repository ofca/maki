<?php

/**
 * This is compiled version of Maki script.
 * For proper source code go to http://emve.org/maki
 *
 * Compiled at: Saturday 24th of February 2018 03:38:33 PM
 * Created by: Tomasz "ofca" Zeludziewicz <ofca@emve.org>
 */

namespace {
    define('MAKI_SINGLE_FILE', true);
}

// vendor/michelf/php-markdown/Michelf/MarkdownInterface.php


#
# Markdown  -  A text-to-HTML conversion tool for web writers
#
# PHP Markdown
# Copyright (c) 2004-2013 Michel Fortin
# <http://michelf.com/projects/php-markdown/>
#
# Original Markdown
# Copyright (c) 2004-2006 John Gruber
# <http://daringfireball.net/projects/markdown/>
#
namespace Michelf {


#
# Markdown Parser Interface
#

interface MarkdownInterface {

  #
  # Initialize the parser and return the result of its transform method.
  # This will work fine for derived classes too.
  #
  public static function defaultTransform($text);

  #
  # Main function. Performs some preprocessing on the input text
  # and pass it through the document gamut.
  #
  public function transform($text);

}




}




// vendor/michelf/php-markdown/Michelf/Markdown.php


#
# Markdown  -  A text-to-HTML conversion tool for web writers
#
# PHP Markdown  
# Copyright (c) 2004-2013 Michel Fortin  
# <http://michelf.com/projects/php-markdown/>
#
# Original Markdown  
# Copyright (c) 2004-2006 John Gruber  
# <http://daringfireball.net/projects/markdown/>
#
namespace Michelf {


#
# Markdown Parser Class
#

class Markdown implements MarkdownInterface {

	### Version ###

	const  MARKDOWNLIB_VERSION  =  "1.4.0";

	### Simple Function Interface ###

	public static function defaultTransform($text) {
	#
	# Initialize the parser and return the result of its transform method.
	# This will work fine for derived classes too.
	#
		# Take parser class on which this function was called.
		$parser_class = \get_called_class();

		# try to take parser from the static parser list
		static $parser_list;
		$parser =& $parser_list[$parser_class];

		# create the parser it not already set
		if (!$parser)
			$parser = new $parser_class;

		# Transform text using parser.
		return $parser->transform($text);
	}

	### Configuration Variables ###

	# Change to ">" for HTML output.
	public $empty_element_suffix = " />";
	public $tab_width = 4;
	
	# Change to `true` to disallow markup or entities.
	public $no_markup = false;
	public $no_entities = false;
	
	# Predefined urls and titles for reference links and images.
	public $predef_urls = array();
	public $predef_titles = array();


	### Parser Implementation ###

	# Regex to match balanced [brackets].
	# Needed to insert a maximum bracked depth while converting to PHP.
	protected $nested_brackets_depth = 6;
	protected $nested_brackets_re;
	
	protected $nested_url_parenthesis_depth = 4;
	protected $nested_url_parenthesis_re;

	# Table of hash values for escaped characters:
	protected $escape_chars = '\`*_{}[]()>#+-.!';
	protected $escape_chars_re;


	public function __construct() {
	#
	# Constructor function. Initialize appropriate member variables.
	#
		$this->_initDetab();
		$this->prepareItalicsAndBold();
	
		$this->nested_brackets_re = 
			str_repeat('(?>[^\[\]]+|\[', $this->nested_brackets_depth).
			str_repeat('\])*', $this->nested_brackets_depth);
	
		$this->nested_url_parenthesis_re = 
			str_repeat('(?>[^()\s]+|\(', $this->nested_url_parenthesis_depth).
			str_repeat('(?>\)))*', $this->nested_url_parenthesis_depth);
		
		$this->escape_chars_re = '['.preg_quote($this->escape_chars).']';
		
		# Sort document, block, and span gamut in ascendent priority order.
		asort($this->document_gamut);
		asort($this->block_gamut);
		asort($this->span_gamut);
	}


	# Internal hashes used during transformation.
	protected $urls = array();
	protected $titles = array();
	protected $html_hashes = array();
	
	# Status flag to avoid invalid nesting.
	protected $in_anchor = false;
	
	
	protected function setup() {
	#
	# Called before the transformation process starts to setup parser 
	# states.
	#
		# Clear global hashes.
		$this->urls = $this->predef_urls;
		$this->titles = $this->predef_titles;
		$this->html_hashes = array();
		
		$this->in_anchor = false;
	}
	
	protected function teardown() {
	#
	# Called after the transformation process to clear any variable 
	# which may be taking up memory unnecessarly.
	#
		$this->urls = array();
		$this->titles = array();
		$this->html_hashes = array();
	}


	public function transform($text) {
	#
	# Main function. Performs some preprocessing on the input text
	# and pass it through the document gamut.
	#
		$this->setup();
	
		# Remove UTF-8 BOM and marker character in input, if present.
		$text = preg_replace('{^\xEF\xBB\xBF|\x1A}', '', $text);

		# Standardize line endings:
		#   DOS to Unix and Mac to Unix
		$text = preg_replace('{\r\n?}', "\n", $text);

		# Make sure $text ends with a couple of newlines:
		$text .= "\n\n";

		# Convert all tabs to spaces.
		$text = $this->detab($text);

		# Turn block-level HTML blocks into hash entries
		$text = $this->hashHTMLBlocks($text);

		# Strip any lines consisting only of spaces and tabs.
		# This makes subsequent regexen easier to write, because we can
		# match consecutive blank lines with /\n+/ instead of something
		# contorted like /[ ]*\n+/ .
		$text = preg_replace('/^[ ]+$/m', '', $text);

		# Run document gamut methods.
		foreach ($this->document_gamut as $method => $priority) {
			$text = $this->$method($text);
		}
		
		$this->teardown();

		return $text . "\n";
	}
	
	protected $document_gamut = array(
		# Strip link definitions, store in hashes.
		"stripLinkDefinitions" => 20,
		
		"runBasicBlockGamut"   => 30,
		);


	protected function stripLinkDefinitions($text) {
	#
	# Strips link definitions from text, stores the URLs and titles in
	# hash references.
	#
		$less_than_tab = $this->tab_width - 1;

		# Link defs are in the form: ^[id]: url "optional title"
		$text = preg_replace_callback('{
							^[ ]{0,'.$less_than_tab.'}\[(.+)\][ ]?:	# id = $1
							  [ ]*
							  \n?				# maybe *one* newline
							  [ ]*
							(?:
							  <(.+?)>			# url = $2
							|
							  (\S+?)			# url = $3
							)
							  [ ]*
							  \n?				# maybe one newline
							  [ ]*
							(?:
								(?<=\s)			# lookbehind for whitespace
								["(]
								(.*?)			# title = $4
								[")]
								[ ]*
							)?	# title is optional
							(?:\n+|\Z)
			}xm',
			array(&$this, '_stripLinkDefinitions_callback'),
			$text);
		return $text;
	}
	protected function _stripLinkDefinitions_callback($matches) {
		$link_id = strtolower($matches[1]);
		$url = $matches[2] == '' ? $matches[3] : $matches[2];
		$this->urls[$link_id] = $url;
		$this->titles[$link_id] =& $matches[4];
		return ''; # String that will replace the block
	}


	protected function hashHTMLBlocks($text) {
		if ($this->no_markup)  return $text;

		$less_than_tab = $this->tab_width - 1;

		# Hashify HTML blocks:
		# We only want to do this for block-level HTML tags, such as headers,
		# lists, and tables. That's because we still want to wrap <p>s around
		# "paragraphs" that are wrapped in non-block-level tags, such as anchors,
		# phrase emphasis, and spans. The list of tags we're looking for is
		# hard-coded:
		#
		# *  List "a" is made of tags which can be both inline or block-level.
		#    These will be treated block-level when the start tag is alone on 
		#    its line, otherwise they're not matched here and will be taken as 
		#    inline later.
		# *  List "b" is made of tags which are always block-level;
		#
		$block_tags_a_re = 'ins|del';
		$block_tags_b_re = 'p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|address|'.
						   'script|noscript|form|fieldset|iframe|math|svg|'.
						   'article|section|nav|aside|hgroup|header|footer|'.
						   'figure';

		# Regular expression for the content of a block tag.
		$nested_tags_level = 4;
		$attr = '
			(?>				# optional tag attributes
			  \s			# starts with whitespace
			  (?>
				[^>"/]+		# text outside quotes
			  |
				/+(?!>)		# slash not followed by ">"
			  |
				"[^"]*"		# text inside double quotes (tolerate ">")
			  |
				\'[^\']*\'	# text inside single quotes (tolerate ">")
			  )*
			)?	
			';
		$content =
			str_repeat('
				(?>
				  [^<]+			# content without tag
				|
				  <\2			# nested opening tag
					'.$attr.'	# attributes
					(?>
					  />
					|
					  >', $nested_tags_level).	# end of opening tag
					  '.*?'.					# last level nested tag content
			str_repeat('
					  </\2\s*>	# closing nested tag
					)
				  |				
					<(?!/\2\s*>	# other tags with a different name
				  )
				)*',
				$nested_tags_level);
		$content2 = str_replace('\2', '\3', $content);

		# First, look for nested blocks, e.g.:
		# 	<div>
		# 		<div>
		# 		tags for inner block must be indented.
		# 		</div>
		# 	</div>
		#
		# The outermost tags must start at the left margin for this to match, and
		# the inner nested divs must be indented.
		# We need to do this before the next, more liberal match, because the next
		# match will start at the first `<div>` and stop at the first `</div>`.
		$text = preg_replace_callback('{(?>
			(?>
				(?<=\n\n)		# Starting after a blank line
				|				# or
				\A\n?			# the beginning of the doc
			)
			(						# save in $1

			  # Match from `\n<tag>` to `</tag>\n`, handling nested tags 
			  # in between.
					
						[ ]{0,'.$less_than_tab.'}
						<('.$block_tags_b_re.')# start tag = $2
						'.$attr.'>			# attributes followed by > and \n
						'.$content.'		# content, support nesting
						</\2>				# the matching end tag
						[ ]*				# trailing spaces/tabs
						(?=\n+|\Z)	# followed by a newline or end of document

			| # Special version for tags of group a.

						[ ]{0,'.$less_than_tab.'}
						<('.$block_tags_a_re.')# start tag = $3
						'.$attr.'>[ ]*\n	# attributes followed by >
						'.$content2.'		# content, support nesting
						</\3>				# the matching end tag
						[ ]*				# trailing spaces/tabs
						(?=\n+|\Z)	# followed by a newline or end of document
					
			| # Special case just for <hr />. It was easier to make a special 
			  # case than to make the other regex more complicated.
			
						[ ]{0,'.$less_than_tab.'}
						<(hr)				# start tag = $2
						'.$attr.'			# attributes
						/?>					# the matching end tag
						[ ]*
						(?=\n{2,}|\Z)		# followed by a blank line or end of document
			
			| # Special case for standalone HTML comments:
			
					[ ]{0,'.$less_than_tab.'}
					(?s:
						<!-- .*? -->
					)
					[ ]*
					(?=\n{2,}|\Z)		# followed by a blank line or end of document
			
			| # PHP and ASP-style processor instructions (<? and <%)
			
					[ ]{0,'.$less_than_tab.'}
					(?s:
						<([?%])			# $2
						.*?
						\2>
					)
					[ ]*
					(?=\n{2,}|\Z)		# followed by a blank line or end of document
					
			)
			)}Sxmi',
			array(&$this, '_hashHTMLBlocks_callback'),
			$text);

		return $text;
	}
	protected function _hashHTMLBlocks_callback($matches) {
		$text = $matches[1];
		$key  = $this->hashBlock($text);
		return "\n\n$key\n\n";
	}
	
	
	protected function hashPart($text, $boundary = 'X') {
	#
	# Called whenever a tag must be hashed when a function insert an atomic 
	# element in the text stream. Passing $text to through this function gives
	# a unique text-token which will be reverted back when calling unhash.
	#
	# The $boundary argument specify what character should be used to surround
	# the token. By convension, "B" is used for block elements that needs not
	# to be wrapped into paragraph tags at the end, ":" is used for elements
	# that are word separators and "X" is used in the general case.
	#
		# Swap back any tag hash found in $text so we do not have to `unhash`
		# multiple times at the end.
		$text = $this->unhash($text);
		
		# Then hash the block.
		static $i = 0;
		$key = "$boundary\x1A" . ++$i . $boundary;
		$this->html_hashes[$key] = $text;
		return $key; # String that will replace the tag.
	}


	protected function hashBlock($text) {
	#
	# Shortcut function for hashPart with block-level boundaries.
	#
		return $this->hashPart($text, 'B');
	}


	protected $block_gamut = array(
	#
	# These are all the transformations that form block-level
	# tags like paragraphs, headers, and list items.
	#
		"doHeaders"         => 10,
		"doHorizontalRules" => 20,
		
		"doLists"           => 40,
		"doCodeBlocks"      => 50,
		"doBlockQuotes"     => 60,
		);

	protected function runBlockGamut($text) {
	#
	# Run block gamut tranformations.
	#
		# We need to escape raw HTML in Markdown source before doing anything 
		# else. This need to be done for each block, and not only at the 
		# begining in the Markdown function since hashed blocks can be part of
		# list items and could have been indented. Indented blocks would have 
		# been seen as a code block in a previous pass of hashHTMLBlocks.
		$text = $this->hashHTMLBlocks($text);
		
		return $this->runBasicBlockGamut($text);
	}
	
	protected function runBasicBlockGamut($text) {
	#
	# Run block gamut tranformations, without hashing HTML blocks. This is 
	# useful when HTML blocks are known to be already hashed, like in the first
	# whole-document pass.
	#
		foreach ($this->block_gamut as $method => $priority) {
			$text = $this->$method($text);
		}
		
		# Finally form paragraph and restore hashed blocks.
		$text = $this->formParagraphs($text);

		return $text;
	}
	
	
	protected function doHorizontalRules($text) {
		# Do Horizontal Rules:
		return preg_replace(
			'{
				^[ ]{0,3}	# Leading space
				([-*_])		# $1: First marker
				(?>			# Repeated marker group
					[ ]{0,2}	# Zero, one, or two spaces.
					\1			# Marker character
				){2,}		# Group repeated at least twice
				[ ]*		# Tailing spaces
				$			# End of line.
			}mx',
			"\n".$this->hashBlock("<hr$this->empty_element_suffix")."\n", 
			$text);
	}


	protected $span_gamut = array(
	#
	# These are all the transformations that occur *within* block-level
	# tags like paragraphs, headers, and list items.
	#
		# Process character escapes, code spans, and inline HTML
		# in one shot.
		"parseSpan"           => -30,

		# Process anchor and image tags. Images must come first,
		# because ![foo][f] looks like an anchor.
		"doImages"            =>  10,
		"doAnchors"           =>  20,
		
		# Make links out of things like `<http://example.com/>`
		# Must come after doAnchors, because you can use < and >
		# delimiters in inline links like [this](<url>).
		"doAutoLinks"         =>  30,
		"encodeAmpsAndAngles" =>  40,

		"doItalicsAndBold"    =>  50,
		"doHardBreaks"        =>  60,
		);

	protected function runSpanGamut($text) {
	#
	# Run span gamut tranformations.
	#
		foreach ($this->span_gamut as $method => $priority) {
			$text = $this->$method($text);
		}

		return $text;
	}
	
	
	protected function doHardBreaks($text) {
		# Do hard breaks:
		return preg_replace_callback('/ {2,}\n/', 
			array(&$this, '_doHardBreaks_callback'), $text);
	}
	protected function _doHardBreaks_callback($matches) {
		return $this->hashPart("<br$this->empty_element_suffix\n");
	}


	protected function doAnchors($text) {
	#
	# Turn Markdown link shortcuts into XHTML <a> tags.
	#
		if ($this->in_anchor) return $text;
		$this->in_anchor = true;
		
		#
		# First, handle reference-style links: [link text] [id]
		#
		$text = preg_replace_callback('{
			(					# wrap whole match in $1
			  \[
				('.$this->nested_brackets_re.')	# link text = $2
			  \]

			  [ ]?				# one optional space
			  (?:\n[ ]*)?		# one optional newline followed by spaces

			  \[
				(.*?)		# id = $3
			  \]
			)
			}xs',
			array(&$this, '_doAnchors_reference_callback'), $text);

		#
		# Next, inline-style links: [link text](url "optional title")
		#
		$text = preg_replace_callback('{
			(				# wrap whole match in $1
			  \[
				('.$this->nested_brackets_re.')	# link text = $2
			  \]
			  \(			# literal paren
				[ \n]*
				(?:
					<(.+?)>	# href = $3
				|
					('.$this->nested_url_parenthesis_re.')	# href = $4
				)
				[ \n]*
				(			# $5
				  ([\'"])	# quote char = $6
				  (.*?)		# Title = $7
				  \6		# matching quote
				  [ \n]*	# ignore any spaces/tabs between closing quote and )
				)?			# title is optional
			  \)
			)
			}xs',
			array(&$this, '_doAnchors_inline_callback'), $text);

		#
		# Last, handle reference-style shortcuts: [link text]
		# These must come last in case you've also got [link text][1]
		# or [link text](/foo)
		#
		$text = preg_replace_callback('{
			(					# wrap whole match in $1
			  \[
				([^\[\]]+)		# link text = $2; can\'t contain [ or ]
			  \]
			)
			}xs',
			array(&$this, '_doAnchors_reference_callback'), $text);

		$this->in_anchor = false;
		return $text;
	}
	protected function _doAnchors_reference_callback($matches) {
		$whole_match =  $matches[1];
		$link_text   =  $matches[2];
		$link_id     =& $matches[3];

		if ($link_id == "") {
			# for shortcut links like [this][] or [this].
			$link_id = $link_text;
		}
		
		# lower-case and turn embedded newlines into spaces
		$link_id = strtolower($link_id);
		$link_id = preg_replace('{[ ]?\n}', ' ', $link_id);

		if (isset($this->urls[$link_id])) {
			$url = $this->urls[$link_id];
			$url = $this->encodeAttribute($url);
			
			$result = "<a href=\"$url\"";
			if ( isset( $this->titles[$link_id] ) ) {
				$title = $this->titles[$link_id];
				$title = $this->encodeAttribute($title);
				$result .=  " title=\"$title\"";
			}
		
			$link_text = $this->runSpanGamut($link_text);
			$result .= ">$link_text</a>";
			$result = $this->hashPart($result);
		}
		else {
			$result = $whole_match;
		}
		return $result;
	}
	protected function _doAnchors_inline_callback($matches) {
		$whole_match	=  $matches[1];
		$link_text		=  $this->runSpanGamut($matches[2]);
		$url			=  $matches[3] == '' ? $matches[4] : $matches[3];
		$title			=& $matches[7];

		$url = $this->encodeAttribute($url);

		$result = "<a href=\"$url\"";
		if (isset($title)) {
			$title = $this->encodeAttribute($title);
			$result .=  " title=\"$title\"";
		}
		
		$link_text = $this->runSpanGamut($link_text);
		$result .= ">$link_text</a>";

		return $this->hashPart($result);
	}


	protected function doImages($text) {
	#
	# Turn Markdown image shortcuts into <img> tags.
	#
		#
		# First, handle reference-style labeled images: ![alt text][id]
		#
		$text = preg_replace_callback('{
			(				# wrap whole match in $1
			  !\[
				('.$this->nested_brackets_re.')		# alt text = $2
			  \]

			  [ ]?				# one optional space
			  (?:\n[ ]*)?		# one optional newline followed by spaces

			  \[
				(.*?)		# id = $3
			  \]

			)
			}xs', 
			array(&$this, '_doImages_reference_callback'), $text);

		#
		# Next, handle inline images:  ![alt text](url "optional title")
		# Don't forget: encode * and _
		#
		$text = preg_replace_callback('{
			(				# wrap whole match in $1
			  !\[
				('.$this->nested_brackets_re.')		# alt text = $2
			  \]
			  \s?			# One optional whitespace character
			  \(			# literal paren
				[ \n]*
				(?:
					<(\S*)>	# src url = $3
				|
					('.$this->nested_url_parenthesis_re.')	# src url = $4
				)
				[ \n]*
				(			# $5
				  ([\'"])	# quote char = $6
				  (.*?)		# title = $7
				  \6		# matching quote
				  [ \n]*
				)?			# title is optional
			  \)
			)
			}xs',
			array(&$this, '_doImages_inline_callback'), $text);

		return $text;
	}
	protected function _doImages_reference_callback($matches) {
		$whole_match = $matches[1];
		$alt_text    = $matches[2];
		$link_id     = strtolower($matches[3]);

		if ($link_id == "") {
			$link_id = strtolower($alt_text); # for shortcut links like ![this][].
		}

		$alt_text = $this->encodeAttribute($alt_text);
		if (isset($this->urls[$link_id])) {
			$url = $this->encodeAttribute($this->urls[$link_id]);
			$result = "<img src=\"$url\" alt=\"$alt_text\"";
			if (isset($this->titles[$link_id])) {
				$title = $this->titles[$link_id];
				$title = $this->encodeAttribute($title);
				$result .=  " title=\"$title\"";
			}
			$result .= $this->empty_element_suffix;
			$result = $this->hashPart($result);
		}
		else {
			# If there's no such link ID, leave intact:
			$result = $whole_match;
		}

		return $result;
	}
	protected function _doImages_inline_callback($matches) {
		$whole_match	= $matches[1];
		$alt_text		= $matches[2];
		$url			= $matches[3] == '' ? $matches[4] : $matches[3];
		$title			=& $matches[7];

		$alt_text = $this->encodeAttribute($alt_text);
		$url = $this->encodeAttribute($url);
		$result = "<img src=\"$url\" alt=\"$alt_text\"";
		if (isset($title)) {
			$title = $this->encodeAttribute($title);
			$result .=  " title=\"$title\""; # $title already quoted
		}
		$result .= $this->empty_element_suffix;

		return $this->hashPart($result);
	}


	protected function doHeaders($text) {
		# Setext-style headers:
		#	  Header 1
		#	  ========
		#  
		#	  Header 2
		#	  --------
		#
		$text = preg_replace_callback('{ ^(.+?)[ ]*\n(=+|-+)[ ]*\n+ }mx',
			array(&$this, '_doHeaders_callback_setext'), $text);

		# atx-style headers:
		#	# Header 1
		#	## Header 2
		#	## Header 2 with closing hashes ##
		#	...
		#	###### Header 6
		#
		$text = preg_replace_callback('{
				^(\#{1,6})	# $1 = string of #\'s
				[ ]*
				(.+?)		# $2 = Header text
				[ ]*
				\#*			# optional closing #\'s (not counted)
				\n+
			}xm',
			array(&$this, '_doHeaders_callback_atx'), $text);

		return $text;
	}
	protected function _doHeaders_callback_setext($matches) {
		# Terrible hack to check we haven't found an empty list item.
		if ($matches[2] == '-' && preg_match('{^-(?: |$)}', $matches[1]))
			return $matches[0];
		
		$level = $matches[2]{0} == '=' ? 1 : 2;
		$block = "<h$level>".$this->runSpanGamut($matches[1])."</h$level>";
		return "\n" . $this->hashBlock($block) . "\n\n";
	}
	protected function _doHeaders_callback_atx($matches) {
		$level = strlen($matches[1]);
		$block = "<h$level>".$this->runSpanGamut($matches[2])."</h$level>";
		return "\n" . $this->hashBlock($block) . "\n\n";
	}


	protected function doLists($text) {
	#
	# Form HTML ordered (numbered) and unordered (bulleted) lists.
	#
		$less_than_tab = $this->tab_width - 1;

		# Re-usable patterns to match list item bullets and number markers:
		$marker_ul_re  = '[*+-]';
		$marker_ol_re  = '\d+[\.]';
		$marker_any_re = "(?:$marker_ul_re|$marker_ol_re)";

		$markers_relist = array(
			$marker_ul_re => $marker_ol_re,
			$marker_ol_re => $marker_ul_re,
			);

		foreach ($markers_relist as $marker_re => $other_marker_re) {
			# Re-usable pattern to match any entirel ul or ol list:
			$whole_list_re = '
				(								# $1 = whole list
				  (								# $2
					([ ]{0,'.$less_than_tab.'})	# $3 = number of spaces
					('.$marker_re.')			# $4 = first list item marker
					[ ]+
				  )
				  (?s:.+?)
				  (								# $5
					  \z
					|
					  \n{2,}
					  (?=\S)
					  (?!						# Negative lookahead for another list item marker
						[ ]*
						'.$marker_re.'[ ]+
					  )
					|
					  (?=						# Lookahead for another kind of list
					    \n
						\3						# Must have the same indentation
						'.$other_marker_re.'[ ]+
					  )
				  )
				)
			'; // mx
			
			# We use a different prefix before nested lists than top-level lists.
			# See extended comment in _ProcessListItems().
		
			if ($this->list_level) {
				$text = preg_replace_callback('{
						^
						'.$whole_list_re.'
					}mx',
					array(&$this, '_doLists_callback'), $text);
			}
			else {
				$text = preg_replace_callback('{
						(?:(?<=\n)\n|\A\n?) # Must eat the newline
						'.$whole_list_re.'
					}mx',
					array(&$this, '_doLists_callback'), $text);
			}
		}

		return $text;
	}
	protected function _doLists_callback($matches) {
		# Re-usable patterns to match list item bullets and number markers:
		$marker_ul_re  = '[*+-]';
		$marker_ol_re  = '\d+[\.]';
		$marker_any_re = "(?:$marker_ul_re|$marker_ol_re)";
		
		$list = $matches[1];
		$list_type = preg_match("/$marker_ul_re/", $matches[4]) ? "ul" : "ol";
		
		$marker_any_re = ( $list_type == "ul" ? $marker_ul_re : $marker_ol_re );
		
		$list .= "\n";
		$result = $this->processListItems($list, $marker_any_re);
		
		$result = $this->hashBlock("<$list_type>\n" . $result . "</$list_type>");
		return "\n". $result ."\n\n";
	}

	protected $list_level = 0;

	protected function processListItems($list_str, $marker_any_re) {
	#
	#	Process the contents of a single ordered or unordered list, splitting it
	#	into individual list items.
	#
		# The $this->list_level global keeps track of when we're inside a list.
		# Each time we enter a list, we increment it; when we leave a list,
		# we decrement. If it's zero, we're not in a list anymore.
		#
		# We do this because when we're not inside a list, we want to treat
		# something like this:
		#
		#		I recommend upgrading to version
		#		8. Oops, now this line is treated
		#		as a sub-list.
		#
		# As a single paragraph, despite the fact that the second line starts
		# with a digit-period-space sequence.
		#
		# Whereas when we're inside a list (or sub-list), that line will be
		# treated as the start of a sub-list. What a kludge, huh? This is
		# an aspect of Markdown's syntax that's hard to parse perfectly
		# without resorting to mind-reading. Perhaps the solution is to
		# change the syntax rules such that sub-lists must start with a
		# starting cardinal number; e.g. "1." or "a.".
		
		$this->list_level++;

		# trim trailing blank lines:
		$list_str = preg_replace("/\n{2,}\\z/", "\n", $list_str);

		$list_str = preg_replace_callback('{
			(\n)?							# leading line = $1
			(^[ ]*)							# leading whitespace = $2
			('.$marker_any_re.'				# list marker and space = $3
				(?:[ ]+|(?=\n))	# space only required if item is not empty
			)
			((?s:.*?))						# list item text   = $4
			(?:(\n+(?=\n))|\n)				# tailing blank line = $5
			(?= \n* (\z | \2 ('.$marker_any_re.') (?:[ ]+|(?=\n))))
			}xm',
			array(&$this, '_processListItems_callback'), $list_str);

		$this->list_level--;
		return $list_str;
	}
	protected function _processListItems_callback($matches) {
		$item = $matches[4];
		$leading_line =& $matches[1];
		$leading_space =& $matches[2];
		$marker_space = $matches[3];
		$tailing_blank_line =& $matches[5];

		if ($leading_line || $tailing_blank_line || 
			preg_match('/\n{2,}/', $item))
		{
			# Replace marker with the appropriate whitespace indentation
			$item = $leading_space . str_repeat(' ', strlen($marker_space)) . $item;
			$item = $this->runBlockGamut($this->outdent($item)."\n");
		}
		else {
			# Recursion for sub-lists:
			$item = $this->doLists($this->outdent($item));
			$item = preg_replace('/\n+$/', '', $item);
			$item = $this->runSpanGamut($item);
		}

		return "<li>" . $item . "</li>\n";
	}


	protected function doCodeBlocks($text) {
	#
	#	Process Markdown `<pre><code>` blocks.
	#
		$text = preg_replace_callback('{
				(?:\n\n|\A\n?)
				(	            # $1 = the code block -- one or more lines, starting with a space/tab
				  (?>
					[ ]{'.$this->tab_width.'}  # Lines must start with a tab or a tab-width of spaces
					.*\n+
				  )+
				)
				((?=^[ ]{0,'.$this->tab_width.'}\S)|\Z)	# Lookahead for non-space at line-start, or end of doc
			}xm',
			array(&$this, '_doCodeBlocks_callback'), $text);

		return $text;
	}
	protected function _doCodeBlocks_callback($matches) {
		$codeblock = $matches[1];

		$codeblock = $this->outdent($codeblock);
		$codeblock = htmlspecialchars($codeblock, ENT_NOQUOTES);

		# trim leading newlines and trailing newlines
		$codeblock = preg_replace('/\A\n+|\n+\z/', '', $codeblock);

		$codeblock = "<pre><code>$codeblock\n</code></pre>";
		return "\n\n".$this->hashBlock($codeblock)."\n\n";
	}


	protected function makeCodeSpan($code) {
	#
	# Create a code span markup for $code. Called from handleSpanToken.
	#
		$code = htmlspecialchars(trim($code), ENT_NOQUOTES);
		return $this->hashPart("<code>$code</code>");
	}


	protected $em_relist = array(
		''  => '(?:(?<!\*)\*(?!\*)|(?<!_)_(?!_))(?=\S|$)(?![\.,:;]\s)',
		'*' => '(?<=\S|^)(?<!\*)\*(?!\*)',
		'_' => '(?<=\S|^)(?<!_)_(?!_)',
		);
	protected $strong_relist = array(
		''   => '(?:(?<!\*)\*\*(?!\*)|(?<!_)__(?!_))(?=\S|$)(?![\.,:;]\s)',
		'**' => '(?<=\S|^)(?<!\*)\*\*(?!\*)',
		'__' => '(?<=\S|^)(?<!_)__(?!_)',
		);
	protected $em_strong_relist = array(
		''    => '(?:(?<!\*)\*\*\*(?!\*)|(?<!_)___(?!_))(?=\S|$)(?![\.,:;]\s)',
		'***' => '(?<=\S|^)(?<!\*)\*\*\*(?!\*)',
		'___' => '(?<=\S|^)(?<!_)___(?!_)',
		);
	protected $em_strong_prepared_relist;
	
	protected function prepareItalicsAndBold() {
	#
	# Prepare regular expressions for searching emphasis tokens in any
	# context.
	#
		foreach ($this->em_relist as $em => $em_re) {
			foreach ($this->strong_relist as $strong => $strong_re) {
				# Construct list of allowed token expressions.
				$token_relist = array();
				if (isset($this->em_strong_relist["$em$strong"])) {
					$token_relist[] = $this->em_strong_relist["$em$strong"];
				}
				$token_relist[] = $em_re;
				$token_relist[] = $strong_re;
				
				# Construct master expression from list.
				$token_re = '{('. implode('|', $token_relist) .')}';
				$this->em_strong_prepared_relist["$em$strong"] = $token_re;
			}
		}
	}
	
	protected function doItalicsAndBold($text) {
		$token_stack = array('');
		$text_stack = array('');
		$em = '';
		$strong = '';
		$tree_char_em = false;
		
		while (1) {
			#
			# Get prepared regular expression for seraching emphasis tokens
			# in current context.
			#
			$token_re = $this->em_strong_prepared_relist["$em$strong"];
			
			#
			# Each loop iteration search for the next emphasis token. 
			# Each token is then passed to handleSpanToken.
			#
			$parts = preg_split($token_re, $text, 2, PREG_SPLIT_DELIM_CAPTURE);
			$text_stack[0] .= $parts[0];
			$token =& $parts[1];
			$text =& $parts[2];
			
			if (empty($token)) {
				# Reached end of text span: empty stack without emitting.
				# any more emphasis.
				while ($token_stack[0]) {
					$text_stack[1] .= array_shift($token_stack);
					$text_stack[0] .= array_shift($text_stack);
				}
				break;
			}
			
			$token_len = strlen($token);
			if ($tree_char_em) {
				# Reached closing marker while inside a three-char emphasis.
				if ($token_len == 3) {
					# Three-char closing marker, close em and strong.
					array_shift($token_stack);
					$span = array_shift($text_stack);
					$span = $this->runSpanGamut($span);
					$span = "<strong><em>$span</em></strong>";
					$text_stack[0] .= $this->hashPart($span);
					$em = '';
					$strong = '';
				} else {
					# Other closing marker: close one em or strong and
					# change current token state to match the other
					$token_stack[0] = str_repeat($token{0}, 3-$token_len);
					$tag = $token_len == 2 ? "strong" : "em";
					$span = $text_stack[0];
					$span = $this->runSpanGamut($span);
					$span = "<$tag>$span</$tag>";
					$text_stack[0] = $this->hashPart($span);
					$$tag = ''; # $$tag stands for $em or $strong
				}
				$tree_char_em = false;
			} else if ($token_len == 3) {
				if ($em) {
					# Reached closing marker for both em and strong.
					# Closing strong marker:
					for ($i = 0; $i < 2; ++$i) {
						$shifted_token = array_shift($token_stack);
						$tag = strlen($shifted_token) == 2 ? "strong" : "em";
						$span = array_shift($text_stack);
						$span = $this->runSpanGamut($span);
						$span = "<$tag>$span</$tag>";
						$text_stack[0] .= $this->hashPart($span);
						$$tag = ''; # $$tag stands for $em or $strong
					}
				} else {
					# Reached opening three-char emphasis marker. Push on token 
					# stack; will be handled by the special condition above.
					$em = $token{0};
					$strong = "$em$em";
					array_unshift($token_stack, $token);
					array_unshift($text_stack, '');
					$tree_char_em = true;
				}
			} else if ($token_len == 2) {
				if ($strong) {
					# Unwind any dangling emphasis marker:
					if (strlen($token_stack[0]) == 1) {
						$text_stack[1] .= array_shift($token_stack);
						$text_stack[0] .= array_shift($text_stack);
					}
					# Closing strong marker:
					array_shift($token_stack);
					$span = array_shift($text_stack);
					$span = $this->runSpanGamut($span);
					$span = "<strong>$span</strong>";
					$text_stack[0] .= $this->hashPart($span);
					$strong = '';
				} else {
					array_unshift($token_stack, $token);
					array_unshift($text_stack, '');
					$strong = $token;
				}
			} else {
				# Here $token_len == 1
				if ($em) {
					if (strlen($token_stack[0]) == 1) {
						# Closing emphasis marker:
						array_shift($token_stack);
						$span = array_shift($text_stack);
						$span = $this->runSpanGamut($span);
						$span = "<em>$span</em>";
						$text_stack[0] .= $this->hashPart($span);
						$em = '';
					} else {
						$text_stack[0] .= $token;
					}
				} else {
					array_unshift($token_stack, $token);
					array_unshift($text_stack, '');
					$em = $token;
				}
			}
		}
		return $text_stack[0];
	}


	protected function doBlockQuotes($text) {
		$text = preg_replace_callback('/
			  (								# Wrap whole match in $1
				(?>
				  ^[ ]*>[ ]?			# ">" at the start of a line
					.+\n					# rest of the first line
				  (.+\n)*					# subsequent consecutive lines
				  \n*						# blanks
				)+
			  )
			/xm',
			array(&$this, '_doBlockQuotes_callback'), $text);

		return $text;
	}
	protected function _doBlockQuotes_callback($matches) {
		$bq = $matches[1];
		# trim one level of quoting - trim whitespace-only lines
		$bq = preg_replace('/^[ ]*>[ ]?|^[ ]+$/m', '', $bq);
		$bq = $this->runBlockGamut($bq);		# recurse

		$bq = preg_replace('/^/m', "  ", $bq);
		# These leading spaces cause problem with <pre> content, 
		# so we need to fix that:
		$bq = preg_replace_callback('{(\s*<pre>.+?</pre>)}sx', 
			array(&$this, '_doBlockQuotes_callback2'), $bq);

		return "\n". $this->hashBlock("<blockquote>\n$bq\n</blockquote>")."\n\n";
	}
	protected function _doBlockQuotes_callback2($matches) {
		$pre = $matches[1];
		$pre = preg_replace('/^  /m', '', $pre);
		return $pre;
	}


	protected function formParagraphs($text) {
	#
	#	Params:
	#		$text - string to process with html <p> tags
	#
		# Strip leading and trailing lines:
		$text = preg_replace('/\A\n+|\n+\z/', '', $text);

		$grafs = preg_split('/\n{2,}/', $text, -1, PREG_SPLIT_NO_EMPTY);

		#
		# Wrap <p> tags and unhashify HTML blocks
		#
		foreach ($grafs as $key => $value) {
			if (!preg_match('/^B\x1A[0-9]+B$/', $value)) {
				# Is a paragraph.
				$value = $this->runSpanGamut($value);
				$value = preg_replace('/^([ ]*)/', "<p>", $value);
				$value .= "</p>";
				$grafs[$key] = $this->unhash($value);
			}
			else {
				# Is a block.
				# Modify elements of @grafs in-place...
				$graf = $value;
				$block = $this->html_hashes[$graf];
				$graf = $block;
//				if (preg_match('{
//					\A
//					(							# $1 = <div> tag
//					  <div  \s+
//					  [^>]*
//					  \b
//					  markdown\s*=\s*  ([\'"])	#	$2 = attr quote char
//					  1
//					  \2
//					  [^>]*
//					  >
//					)
//					(							# $3 = contents
//					.*
//					)
//					(</div>)					# $4 = closing tag
//					\z
//					}xs', $block, $matches))
//				{
//					list(, $div_open, , $div_content, $div_close) = $matches;
//
//					# We can't call Markdown(), because that resets the hash;
//					# that initialization code should be pulled into its own sub, though.
//					$div_content = $this->hashHTMLBlocks($div_content);
//					
//					# Run document gamut methods on the content.
//					foreach ($this->document_gamut as $method => $priority) {
//						$div_content = $this->$method($div_content);
//					}
//
//					$div_open = preg_replace(
//						'{\smarkdown\s*=\s*([\'"]).+?\1}', '', $div_open);
//
//					$graf = $div_open . "\n" . $div_content . "\n" . $div_close;
//				}
				$grafs[$key] = $graf;
			}
		}

		return implode("\n\n", $grafs);
	}


	protected function encodeAttribute($text) {
	#
	# Encode text for a double-quoted HTML attribute. This function
	# is *not* suitable for attributes enclosed in single quotes.
	#
		$text = $this->encodeAmpsAndAngles($text);
		$text = str_replace('"', '&quot;', $text);
		return $text;
	}
	
	
	protected function encodeAmpsAndAngles($text) {
	#
	# Smart processing for ampersands and angle brackets that need to 
	# be encoded. Valid character entities are left alone unless the
	# no-entities mode is set.
	#
		if ($this->no_entities) {
			$text = str_replace('&', '&amp;', $text);
		} else {
			# Ampersand-encoding based entirely on Nat Irons's Amputator
			# MT plugin: <http://bumppo.net/projects/amputator/>
			$text = preg_replace('/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/', 
								'&amp;', $text);
		}
		# Encode remaining <'s
		$text = str_replace('<', '&lt;', $text);

		return $text;
	}


	protected function doAutoLinks($text) {
		$text = preg_replace_callback('{<((https?|ftp|dict):[^\'">\s]+)>}i', 
			array(&$this, '_doAutoLinks_url_callback'), $text);

		# Email addresses: <address@domain.foo>
		$text = preg_replace_callback('{
			<
			(?:mailto:)?
			(
				(?:
					[-!#$%&\'*+/=?^_`.{|}~\w\x80-\xFF]+
				|
					".*?"
				)
				\@
				(?:
					[-a-z0-9\x80-\xFF]+(\.[-a-z0-9\x80-\xFF]+)*\.[a-z]+
				|
					\[[\d.a-fA-F:]+\]	# IPv4 & IPv6
				)
			)
			>
			}xi',
			array(&$this, '_doAutoLinks_email_callback'), $text);
		$text = preg_replace_callback('{<(tel:([^\'">\s]+))>}i',array(&$this, '_doAutoLinks_tel_callback'), $text);

		return $text;
	}
	protected function _doAutoLinks_tel_callback($matches) {
		$url = $this->encodeAttribute($matches[1]);
		$tel = $this->encodeAttribute($matches[2]);
		$link = "<a href=\"$url\">$tel</a>";
		return $this->hashPart($link);
	}
	protected function _doAutoLinks_url_callback($matches) {
		$url = $this->encodeAttribute($matches[1]);
		$link = "<a href=\"$url\">$url</a>";
		return $this->hashPart($link);
	}
	protected function _doAutoLinks_email_callback($matches) {
		$address = $matches[1];
		$link = $this->encodeEmailAddress($address);
		return $this->hashPart($link);
	}


	protected function encodeEmailAddress($addr) {
	#
	#	Input: an email address, e.g. "foo@example.com"
	#
	#	Output: the email address as a mailto link, with each character
	#		of the address encoded as either a decimal or hex entity, in
	#		the hopes of foiling most address harvesting spam bots. E.g.:
	#
	#	  <p><a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#x66;o&#111;
	#        &#x40;&#101;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;
	#        &#x6d;">&#x66;o&#111;&#x40;&#101;&#x78;&#97;&#x6d;&#112;&#x6c;
	#        &#101;&#46;&#x63;&#111;&#x6d;</a></p>
	#
	#	Based by a filter by Matthew Wickline, posted to BBEdit-Talk.
	#   With some optimizations by Milian Wolff.
	#
		$addr = "mailto:" . $addr;
		$chars = preg_split('/(?<!^)(?!$)/', $addr);
		$seed = (int)abs(crc32($addr) / strlen($addr)); # Deterministic seed.
		
		foreach ($chars as $key => $char) {
			$ord = ord($char);
			# Ignore non-ascii chars.
			if ($ord < 128) {
				$r = ($seed * (1 + $key)) % 100; # Pseudo-random function.
				# roughly 10% raw, 45% hex, 45% dec
				# '@' *must* be encoded. I insist.
				if ($r > 90 && $char != '@') /* do nothing */;
				else if ($r < 45) $chars[$key] = '&#x'.dechex($ord).';';
				else              $chars[$key] = '&#'.$ord.';';
			}
		}
		
		$addr = implode('', $chars);
		$text = implode('', array_slice($chars, 7)); # text without `mailto:`
		$addr = "<a href=\"$addr\">$text</a>";

		return $addr;
	}


	protected function parseSpan($str) {
	#
	# Take the string $str and parse it into tokens, hashing embeded HTML,
	# escaped characters and handling code spans.
	#
		$output = '';
		
		$span_re = '{
				(
					\\\\'.$this->escape_chars_re.'
				|
					(?<![`\\\\])
					`+						# code span marker
			'.( $this->no_markup ? '' : '
				|
					<!--    .*?     -->		# comment
				|
					<\?.*?\?> | <%.*?%>		# processing instruction
				|
					<[!$]?[-a-zA-Z0-9:_]+	# regular tags
					(?>
						\s
						(?>[^"\'>]+|"[^"]*"|\'[^\']*\')*
					)?
					>
				|
					<[-a-zA-Z0-9:_]+\s*/> # xml-style empty tag
				|
					</[-a-zA-Z0-9:_]+\s*> # closing tag
			').'
				)
				}xs';

		while (1) {
			#
			# Each loop iteration seach for either the next tag, the next 
			# openning code span marker, or the next escaped character. 
			# Each token is then passed to handleSpanToken.
			#
			$parts = preg_split($span_re, $str, 2, PREG_SPLIT_DELIM_CAPTURE);
			
			# Create token from text preceding tag.
			if ($parts[0] != "") {
				$output .= $parts[0];
			}
			
			# Check if we reach the end.
			if (isset($parts[1])) {
				$output .= $this->handleSpanToken($parts[1], $parts[2]);
				$str = $parts[2];
			}
			else {
				break;
			}
		}
		
		return $output;
	}
	
	
	protected function handleSpanToken($token, &$str) {
	#
	# Handle $token provided by parseSpan by determining its nature and 
	# returning the corresponding value that should replace it.
	#
		switch ($token{0}) {
			case "\\":
				return $this->hashPart("&#". ord($token{1}). ";");
			case "`":
				# Search for end marker in remaining text.
				if (preg_match('/^(.*?[^`])'.preg_quote($token).'(?!`)(.*)$/sm', 
					$str, $matches))
				{
					$str = $matches[2];
					$codespan = $this->makeCodeSpan($matches[1]);
					return $this->hashPart($codespan);
				}
				return $token; // return as text since no ending marker found.
			default:
				return $this->hashPart($token);
		}
	}


	protected function outdent($text) {
	#
	# Remove one level of line-leading tabs or spaces
	#
		return preg_replace('/^(\t|[ ]{1,'.$this->tab_width.'})/m', '', $text);
	}


	# String length function for detab. `_initDetab` will create a function to 
	# hanlde UTF-8 if the default function does not exist.
	protected $utf8_strlen = 'mb_strlen';
	
	protected function detab($text) {
	#
	# Replace tabs with the appropriate amount of space.
	#
		# For each line we separate the line in blocks delemited by
		# tab characters. Then we reconstruct every line by adding the 
		# appropriate number of space between each blocks.
		
		$text = preg_replace_callback('/^.*\t.*$/m',
			array(&$this, '_detab_callback'), $text);

		return $text;
	}
	protected function _detab_callback($matches) {
		$line = $matches[0];
		$strlen = $this->utf8_strlen; # strlen function for UTF-8.
		
		# Split in blocks.
		$blocks = explode("\t", $line);
		# Add each blocks to the line.
		$line = $blocks[0];
		unset($blocks[0]); # Do not add first block twice.
		foreach ($blocks as $block) {
			# Calculate amount of space, insert spaces, insert block.
			$amount = $this->tab_width - 
				$strlen($line, 'UTF-8') % $this->tab_width;
			$line .= str_repeat(" ", $amount) . $block;
		}
		return $line;
	}
	protected function _initDetab() {
	#
	# Check for the availability of the function in the `utf8_strlen` property
	# (initially `mb_strlen`). If the function is not available, create a 
	# function that will loosely count the number of UTF-8 characters with a
	# regular expression.
	#
		if (function_exists($this->utf8_strlen)) return;
		$this->utf8_strlen = create_function('$text', 'return preg_match_all(
			"/[\\\\x00-\\\\xBF]|[\\\\xC0-\\\\xFF][\\\\x80-\\\\xBF]*/", 
			$text, $m);');
	}


	protected function unhash($text) {
	#
	# Swap back in all the tags hashed by _HashHTMLBlocks.
	#
		return preg_replace_callback('/(.)\x1A[0-9]+\1/', 
			array(&$this, '_unhash_callback'), $text);
	}
	protected function _unhash_callback($matches) {
		return $this->html_hashes[$matches[0]];
	}

}


#
# Temporary Markdown Extra Parser Implementation Class
#
# NOTE: DON'T USE THIS CLASS
# Currently the implementation of of Extra resides here in this temporary class.
# This makes it easier to propagate the changes between the three different
# packaging styles of PHP Markdown. When this issue is resolved, this
# MarkdownExtra_TmpImpl class here will disappear and \Michelf\MarkdownExtra
# will contain the code. So please use \Michelf\MarkdownExtra and ignore this
# one.
#

abstract class _MarkdownExtra_TmpImpl extends \Michelf\Markdown {

	### Configuration Variables ###

	# Prefix for footnote ids.
	public $fn_id_prefix = "";
	
	# Optional title attribute for footnote links and backlinks.
	public $fn_link_title = "";
	public $fn_backlink_title = "";
	
	# Optional class attribute for footnote links and backlinks.
	public $fn_link_class = "footnote-ref";
	public $fn_backlink_class = "footnote-backref";

	# Class name for table cell alignment (%% replaced left/center/right)
	# For instance: 'go-%%' becomes 'go-left' or 'go-right' or 'go-center'
	# If empty, the align attribute is used instead of a class name.
	public $table_align_class_tmpl = '';

	# Optional class prefix for fenced code block.
	public $code_class_prefix = "";
	# Class attribute for code blocks goes on the `code` tag;
	# setting this to true will put attributes on the `pre` tag instead.
	public $code_attr_on_pre = false;
	
	# Predefined abbreviations.
	public $predef_abbr = array();


	### Parser Implementation ###

	public function __construct() {
	#
	# Constructor function. Initialize the parser object.
	#
		# Add extra escapable characters before parent constructor 
		# initialize the table.
		$this->escape_chars .= ':|';
		
		# Insert extra document, block, and span transformations. 
		# Parent constructor will do the sorting.
		$this->document_gamut += array(
			"doFencedCodeBlocks" => 5,
			"stripFootnotes"     => 15,
			"stripAbbreviations" => 25,
			"appendFootnotes"    => 50,
			);
		$this->block_gamut += array(
			"doFencedCodeBlocks" => 5,
			"doTables"           => 15,
			"doDefLists"         => 45,
			);
		$this->span_gamut += array(
			"doFootnotes"        => 5,
			"doAbbreviations"    => 70,
			);
		
		parent::__construct();
	}
	
	
	# Extra variables used during extra transformations.
	protected $footnotes = array();
	protected $footnotes_ordered = array();
	protected $footnotes_ref_count = array();
	protected $footnotes_numbers = array();
	protected $abbr_desciptions = array();
	protected $abbr_word_re = '';
	
	# Give the current footnote number.
	protected $footnote_counter = 1;
	
	
	protected function setup() {
	#
	# Setting up Extra-specific variables.
	#
		parent::setup();
		
		$this->footnotes = array();
		$this->footnotes_ordered = array();
		$this->footnotes_ref_count = array();
		$this->footnotes_numbers = array();
		$this->abbr_desciptions = array();
		$this->abbr_word_re = '';
		$this->footnote_counter = 1;
		
		foreach ($this->predef_abbr as $abbr_word => $abbr_desc) {
			if ($this->abbr_word_re)
				$this->abbr_word_re .= '|';
			$this->abbr_word_re .= preg_quote($abbr_word);
			$this->abbr_desciptions[$abbr_word] = trim($abbr_desc);
		}
	}
	
	protected function teardown() {
	#
	# Clearing Extra-specific variables.
	#
		$this->footnotes = array();
		$this->footnotes_ordered = array();
		$this->footnotes_ref_count = array();
		$this->footnotes_numbers = array();
		$this->abbr_desciptions = array();
		$this->abbr_word_re = '';
		
		parent::teardown();
	}
	
	
	### Extra Attribute Parser ###

	# Expression to use to catch attributes (includes the braces)
	protected $id_class_attr_catch_re = '\{((?:[ ]*[#.][-_:a-zA-Z0-9]+){1,})[ ]*\}';
	# Expression to use when parsing in a context when no capture is desired
	protected $id_class_attr_nocatch_re = '\{(?:[ ]*[#.][-_:a-zA-Z0-9]+){1,}[ ]*\}';

	protected function doExtraAttributes($tag_name, $attr) {
	#
	# Parse attributes caught by the $this->id_class_attr_catch_re expression
	# and return the HTML-formatted list of attributes.
	#
	# Currently supported attributes are .class and #id.
	#
		if (empty($attr)) return "";
		
		# Split on components
		preg_match_all('/[#.][-_:a-zA-Z0-9]+/', $attr, $matches);
		$elements = $matches[0];

		# handle classes and ids (only first id taken into account)
		$classes = array();
		$id = false;
		foreach ($elements as $element) {
			if ($element{0} == '.') {
				$classes[] = substr($element, 1);
			} else if ($element{0} == '#') {
				if ($id === false) $id = substr($element, 1);
			}
		}

		# compose attributes as string
		$attr_str = "";
		if (!empty($id)) {
			$attr_str .= ' id="'.$id.'"';
		}
		if (!empty($classes)) {
			$attr_str .= ' class="'.implode(" ", $classes).'"';
		}
		return $attr_str;
	}


	protected function stripLinkDefinitions($text) {
	#
	# Strips link definitions from text, stores the URLs and titles in
	# hash references.
	#
		$less_than_tab = $this->tab_width - 1;

		# Link defs are in the form: ^[id]: url "optional title"
		$text = preg_replace_callback('{
							^[ ]{0,'.$less_than_tab.'}\[(.+)\][ ]?:	# id = $1
							  [ ]*
							  \n?				# maybe *one* newline
							  [ ]*
							(?:
							  <(.+?)>			# url = $2
							|
							  (\S+?)			# url = $3
							)
							  [ ]*
							  \n?				# maybe one newline
							  [ ]*
							(?:
								(?<=\s)			# lookbehind for whitespace
								["(]
								(.*?)			# title = $4
								[")]
								[ ]*
							)?	# title is optional
					(?:[ ]* '.$this->id_class_attr_catch_re.' )?  # $5 = extra id & class attr
							(?:\n+|\Z)
			}xm',
			array(&$this, '_stripLinkDefinitions_callback'),
			$text);
		return $text;
	}
	protected function _stripLinkDefinitions_callback($matches) {
		$link_id = strtolower($matches[1]);
		$url = $matches[2] == '' ? $matches[3] : $matches[2];
		$this->urls[$link_id] = $url;
		$this->titles[$link_id] =& $matches[4];
		$this->ref_attr[$link_id] = $this->doExtraAttributes("", $dummy =& $matches[5]);
		return ''; # String that will replace the block
	}


	### HTML Block Parser ###
	
	# Tags that are always treated as block tags:
	protected $block_tags_re = 'p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|address|form|fieldset|iframe|hr|legend|article|section|nav|aside|hgroup|header|footer|figcaption';
						   
	# Tags treated as block tags only if the opening tag is alone on its line:
	protected $context_block_tags_re = 'script|noscript|ins|del|iframe|object|source|track|param|math|svg|canvas|audio|video';
	
	# Tags where markdown="1" default to span mode:
	protected $contain_span_tags_re = 'p|h[1-6]|li|dd|dt|td|th|legend|address';
	
	# Tags which must not have their contents modified, no matter where 
	# they appear:
	protected $clean_tags_re = 'script|math|svg';
	
	# Tags that do not need to be closed.
	protected $auto_close_tags_re = 'hr|img|param|source|track';
	

	protected function hashHTMLBlocks($text) {
	#
	# Hashify HTML Blocks and "clean tags".
	#
	# We only want to do this for block-level HTML tags, such as headers,
	# lists, and tables. That's because we still want to wrap <p>s around
	# "paragraphs" that are wrapped in non-block-level tags, such as anchors,
	# phrase emphasis, and spans. The list of tags we're looking for is
	# hard-coded.
	#
	# This works by calling _HashHTMLBlocks_InMarkdown, which then calls
	# _HashHTMLBlocks_InHTML when it encounter block tags. When the markdown="1" 
	# attribute is found within a tag, _HashHTMLBlocks_InHTML calls back
	#  _HashHTMLBlocks_InMarkdown to handle the Markdown syntax within the tag.
	# These two functions are calling each other. It's recursive!
	#
		if ($this->no_markup)  return $text;

		#
		# Call the HTML-in-Markdown hasher.
		#
		list($text, ) = $this->_hashHTMLBlocks_inMarkdown($text);
		
		return $text;
	}
	protected function _hashHTMLBlocks_inMarkdown($text, $indent = 0,
										$enclosing_tag_re = '', $span = false)
	{
	#
	# Parse markdown text, calling _HashHTMLBlocks_InHTML for block tags.
	#
	# *   $indent is the number of space to be ignored when checking for code 
	#     blocks. This is important because if we don't take the indent into 
	#     account, something like this (which looks right) won't work as expected:
	#
	#     <div>
	#         <div markdown="1">
	#         Hello World.  <-- Is this a Markdown code block or text?
	#         </div>  <-- Is this a Markdown code block or a real tag?
	#     <div>
	#
	#     If you don't like this, just don't indent the tag on which
	#     you apply the markdown="1" attribute.
	#
	# *   If $enclosing_tag_re is not empty, stops at the first unmatched closing 
	#     tag with that name. Nested tags supported.
	#
	# *   If $span is true, text inside must treated as span. So any double 
	#     newline will be replaced by a single newline so that it does not create 
	#     paragraphs.
	#
	# Returns an array of that form: ( processed text , remaining text )
	#
		if ($text === '') return array('', '');

		# Regex to check for the presense of newlines around a block tag.
		$newline_before_re = '/(?:^\n?|\n\n)*$/';
		$newline_after_re = 
			'{
				^						# Start of text following the tag.
				(?>[ ]*<!--.*?-->)?		# Optional comment.
				[ ]*\n					# Must be followed by newline.
			}xs';
		
		# Regex to match any tag.
		$block_tag_re =
			'{
				(					# $2: Capture whole tag.
					</?					# Any opening or closing tag.
						(?>				# Tag name.
							'.$this->block_tags_re.'			|
							'.$this->context_block_tags_re.'	|
							'.$this->clean_tags_re.'        	|
							(?!\s)'.$enclosing_tag_re.'
						)
						(?:
							(?=[\s"\'/a-zA-Z0-9])	# Allowed characters after tag name.
							(?>
								".*?"		|	# Double quotes (can contain `>`)
								\'.*?\'   	|	# Single quotes (can contain `>`)
								.+?				# Anything but quotes and `>`.
							)*?
						)?
					>					# End of tag.
				|
					<!--    .*?     -->	# HTML Comment
				|
					<\?.*?\?> | <%.*?%>	# Processing instruction
				|
					<!\[CDATA\[.*?\]\]>	# CData Block
				'. ( !$span ? ' # If not in span.
				|
					# Indented code block
					(?: ^[ ]*\n | ^ | \n[ ]*\n )
					[ ]{'.($indent+4).'}[^\n]* \n
					(?>
						(?: [ ]{'.($indent+4).'}[^\n]* | [ ]* ) \n
					)*
				|
					# Fenced code block marker
					(?<= ^ | \n )
					[ ]{0,'.($indent+3).'}(?:~{3,}|`{3,})
									[ ]*
					(?:
					\.?[-_:a-zA-Z0-9]+ # standalone class name
					|
						'.$this->id_class_attr_nocatch_re.' # extra attributes
					)?
					[ ]*
					(?= \n )
				' : '' ). ' # End (if not is span).
				|
					# Code span marker
					# Note, this regex needs to go after backtick fenced
					# code blocks but it should also be kept outside of the
					# "if not in span" condition adding backticks to the parser
					`+
				)
			}xs';

		
		$depth = 0;		# Current depth inside the tag tree.
		$parsed = "";	# Parsed text that will be returned.

		#
		# Loop through every tag until we find the closing tag of the parent
		# or loop until reaching the end of text if no parent tag specified.
		#
		do {
			#
			# Split the text using the first $tag_match pattern found.
			# Text before  pattern will be first in the array, text after
			# pattern will be at the end, and between will be any catches made 
			# by the pattern.
			#
			$parts = preg_split($block_tag_re, $text, 2, 
								PREG_SPLIT_DELIM_CAPTURE);
			
			# If in Markdown span mode, add a empty-string span-level hash 
			# after each newline to prevent triggering any block element.
			if ($span) {
				$void = $this->hashPart("", ':');
				$newline = "$void\n";
				$parts[0] = $void . str_replace("\n", $newline, $parts[0]) . $void;
			}
			
			$parsed .= $parts[0]; # Text before current tag.
			
			# If end of $text has been reached. Stop loop.
			if (count($parts) < 3) {
				$text = "";
				break;
			}
			
			$tag  = $parts[1]; # Tag to handle.
			$text = $parts[2]; # Remaining text after current tag.
			$tag_re = preg_quote($tag); # For use in a regular expression.
			
			#
			# Check for: Fenced code block marker.
			# Note: need to recheck the whole tag to disambiguate backtick
			# fences from code spans
			#
			if (preg_match('{^\n?([ ]{0,'.($indent+3).'})(~{3,}|`{3,})[ ]*(?:\.?[-_:a-zA-Z0-9]+|'.$this->id_class_attr_nocatch_re.')?[ ]*\n?$}', $tag, $capture)) {
				# Fenced code block marker: find matching end marker.
				$fence_indent = strlen($capture[1]); # use captured indent in re
				$fence_re = $capture[2]; # use captured fence in re
				if (preg_match('{^(?>.*\n)*?[ ]{'.($fence_indent).'}'.$fence_re.'[ ]*(?:\n|$)}', $text,
					$matches)) 
				{
					# End marker found: pass text unchanged until marker.
					$parsed .= $tag . $matches[0];
					$text = substr($text, strlen($matches[0]));
				}
				else {
					# No end marker: just skip it.
					$parsed .= $tag;
				}
			}
			#
			# Check for: Indented code block.
			#
			else if ($tag{0} == "\n" || $tag{0} == " ") {
				# Indented code block: pass it unchanged, will be handled 
				# later.
				$parsed .= $tag;
			}
			#
			# Check for: Code span marker
			# Note: need to check this after backtick fenced code blocks
			#
			else if ($tag{0} == "`") {
				# Find corresponding end marker.
				$tag_re = preg_quote($tag);
				if (preg_match('{^(?>.+?|\n(?!\n))*?(?<!`)'.$tag_re.'(?!`)}',
					$text, $matches))
				{
					# End marker found: pass text unchanged until marker.
					$parsed .= $tag . $matches[0];
					$text = substr($text, strlen($matches[0]));
				}
				else {
					# Unmatched marker: just skip it.
					$parsed .= $tag;
				}
			}
			#
			# Check for: Opening Block level tag or
			#            Opening Context Block tag (like ins and del) 
			#               used as a block tag (tag is alone on it's line).
			#
			else if (preg_match('{^<(?:'.$this->block_tags_re.')\b}', $tag) ||
				(	preg_match('{^<(?:'.$this->context_block_tags_re.')\b}', $tag) &&
					preg_match($newline_before_re, $parsed) &&
					preg_match($newline_after_re, $text)	)
				)
			{
				# Need to parse tag and following text using the HTML parser.
				list($block_text, $text) = 
					$this->_hashHTMLBlocks_inHTML($tag . $text, "hashBlock", true);
				
				# Make sure it stays outside of any paragraph by adding newlines.
				$parsed .= "\n\n$block_text\n\n";
			}
			#
			# Check for: Clean tag (like script, math)
			#            HTML Comments, processing instructions.
			#
			else if (preg_match('{^<(?:'.$this->clean_tags_re.')\b}', $tag) ||
				$tag{1} == '!' || $tag{1} == '?')
			{
				# Need to parse tag and following text using the HTML parser.
				# (don't check for markdown attribute)
				list($block_text, $text) = 
					$this->_hashHTMLBlocks_inHTML($tag . $text, "hashClean", false);
				
				$parsed .= $block_text;
			}
			#
			# Check for: Tag with same name as enclosing tag.
			#
			else if ($enclosing_tag_re !== '' &&
				# Same name as enclosing tag.
				preg_match('{^</?(?:'.$enclosing_tag_re.')\b}', $tag))
			{
				#
				# Increase/decrease nested tag count.
				#
				if ($tag{1} == '/')						$depth--;
				else if ($tag{strlen($tag)-2} != '/')	$depth++;

				if ($depth < 0) {
					#
					# Going out of parent element. Clean up and break so we
					# return to the calling function.
					#
					$text = $tag . $text;
					break;
				}
				
				$parsed .= $tag;
			}
			else {
				$parsed .= $tag;
			}
		} while ($depth >= 0);
		
		return array($parsed, $text);
	}
	protected function _hashHTMLBlocks_inHTML($text, $hash_method, $md_attr) {
	#
	# Parse HTML, calling _HashHTMLBlocks_InMarkdown for block tags.
	#
	# *   Calls $hash_method to convert any blocks.
	# *   Stops when the first opening tag closes.
	# *   $md_attr indicate if the use of the `markdown="1"` attribute is allowed.
	#     (it is not inside clean tags)
	#
	# Returns an array of that form: ( processed text , remaining text )
	#
		if ($text === '') return array('', '');
		
		# Regex to match `markdown` attribute inside of a tag.
		$markdown_attr_re = '
			{
				\s*			# Eat whitespace before the `markdown` attribute
				markdown
				\s*=\s*
				(?>
					(["\'])		# $1: quote delimiter		
					(.*?)		# $2: attribute value
					\1			# matching delimiter	
				|
					([^\s>]*)	# $3: unquoted attribute value
				)
				()				# $4: make $3 always defined (avoid warnings)
			}xs';
		
		# Regex to match any tag.
		$tag_re = '{
				(					# $2: Capture whole tag.
					</?					# Any opening or closing tag.
						[\w:$]+			# Tag name.
						(?:
							(?=[\s"\'/a-zA-Z0-9])	# Allowed characters after tag name.
							(?>
								".*?"		|	# Double quotes (can contain `>`)
								\'.*?\'   	|	# Single quotes (can contain `>`)
								.+?				# Anything but quotes and `>`.
							)*?
						)?
					>					# End of tag.
				|
					<!--    .*?     -->	# HTML Comment
				|
					<\?.*?\?> | <%.*?%>	# Processing instruction
				|
					<!\[CDATA\[.*?\]\]>	# CData Block
				)
			}xs';
		
		$original_text = $text;		# Save original text in case of faliure.
		
		$depth		= 0;	# Current depth inside the tag tree.
		$block_text	= "";	# Temporary text holder for current text.
		$parsed		= "";	# Parsed text that will be returned.

		#
		# Get the name of the starting tag.
		# (This pattern makes $base_tag_name_re safe without quoting.)
		#
		if (preg_match('/^<([\w:$]*)\b/', $text, $matches))
			$base_tag_name_re = $matches[1];

		#
		# Loop through every tag until we find the corresponding closing tag.
		#
		do {
			#
			# Split the text using the first $tag_match pattern found.
			# Text before  pattern will be first in the array, text after
			# pattern will be at the end, and between will be any catches made 
			# by the pattern.
			#
			$parts = preg_split($tag_re, $text, 2, PREG_SPLIT_DELIM_CAPTURE);
			
			if (count($parts) < 3) {
				#
				# End of $text reached with unbalenced tag(s).
				# In that case, we return original text unchanged and pass the
				# first character as filtered to prevent an infinite loop in the 
				# parent function.
				#
				return array($original_text{0}, substr($original_text, 1));
			}
			
			$block_text .= $parts[0]; # Text before current tag.
			$tag         = $parts[1]; # Tag to handle.
			$text        = $parts[2]; # Remaining text after current tag.
			
			#
			# Check for: Auto-close tag (like <hr/>)
			#			 Comments and Processing Instructions.
			#
			if (preg_match('{^</?(?:'.$this->auto_close_tags_re.')\b}', $tag) ||
				$tag{1} == '!' || $tag{1} == '?')
			{
				# Just add the tag to the block as if it was text.
				$block_text .= $tag;
			}
			else {
				#
				# Increase/decrease nested tag count. Only do so if
				# the tag's name match base tag's.
				#
				if (preg_match('{^</?'.$base_tag_name_re.'\b}', $tag)) {
					if ($tag{1} == '/')						$depth--;
					else if ($tag{strlen($tag)-2} != '/')	$depth++;
				}
				
				#
				# Check for `markdown="1"` attribute and handle it.
				#
				if ($md_attr && 
					preg_match($markdown_attr_re, $tag, $attr_m) &&
					preg_match('/^1|block|span$/', $attr_m[2] . $attr_m[3]))
				{
					# Remove `markdown` attribute from opening tag.
					$tag = preg_replace($markdown_attr_re, '', $tag);
					
					# Check if text inside this tag must be parsed in span mode.
					$this->mode = $attr_m[2] . $attr_m[3];
					$span_mode = $this->mode == 'span' || $this->mode != 'block' &&
						preg_match('{^<(?:'.$this->contain_span_tags_re.')\b}', $tag);
					
					# Calculate indent before tag.
					if (preg_match('/(?:^|\n)( *?)(?! ).*?$/', $block_text, $matches)) {
						$strlen = $this->utf8_strlen;
						$indent = $strlen($matches[1], 'UTF-8');
					} else {
						$indent = 0;
					}
					
					# End preceding block with this tag.
					$block_text .= $tag;
					$parsed .= $this->$hash_method($block_text);
					
					# Get enclosing tag name for the ParseMarkdown function.
					# (This pattern makes $tag_name_re safe without quoting.)
					preg_match('/^<([\w:$]*)\b/', $tag, $matches);
					$tag_name_re = $matches[1];
					
					# Parse the content using the HTML-in-Markdown parser.
					list ($block_text, $text)
						= $this->_hashHTMLBlocks_inMarkdown($text, $indent, 
							$tag_name_re, $span_mode);
					
					# Outdent markdown text.
					if ($indent > 0) {
						$block_text = preg_replace("/^[ ]{1,$indent}/m", "", 
													$block_text);
					}
					
					# Append tag content to parsed text.
					if (!$span_mode)	$parsed .= "\n\n$block_text\n\n";
					else				$parsed .= "$block_text";
					
					# Start over with a new block.
					$block_text = "";
				}
				else $block_text .= $tag;
			}
			
		} while ($depth > 0);
		
		#
		# Hash last block text that wasn't processed inside the loop.
		#
		$parsed .= $this->$hash_method($block_text);
		
		return array($parsed, $text);
	}


	protected function hashClean($text) {
	#
	# Called whenever a tag must be hashed when a function inserts a "clean" tag
	# in $text, it passes through this function and is automaticaly escaped, 
	# blocking invalid nested overlap.
	#
		return $this->hashPart($text, 'C');
	}


	protected function doAnchors($text) {
	#
	# Turn Markdown link shortcuts into XHTML <a> tags.
	#
		if ($this->in_anchor) return $text;
		$this->in_anchor = true;
		
		#
		# First, handle reference-style links: [link text] [id]
		#
		$text = preg_replace_callback('{
			(					# wrap whole match in $1
			  \[
				('.$this->nested_brackets_re.')	# link text = $2
			  \]

			  [ ]?				# one optional space
			  (?:\n[ ]*)?		# one optional newline followed by spaces

			  \[
				(.*?)		# id = $3
			  \]
			)
			}xs',
			array(&$this, '_doAnchors_reference_callback'), $text);

		#
		# Next, inline-style links: [link text](url "optional title")
		#
		$text = preg_replace_callback('{
			(				# wrap whole match in $1
			  \[
				('.$this->nested_brackets_re.')	# link text = $2
			  \]
			  \(			# literal paren
				[ \n]*
				(?:
					<(.+?)>	# href = $3
				|
					('.$this->nested_url_parenthesis_re.')	# href = $4
				)
				[ \n]*
				(			# $5
				  ([\'"])	# quote char = $6
				  (.*?)		# Title = $7
				  \6		# matching quote
				  [ \n]*	# ignore any spaces/tabs between closing quote and )
				)?			# title is optional
			  \)
			  (?:[ ]? '.$this->id_class_attr_catch_re.' )?	 # $8 = id/class attributes
			)
			}xs',
			array(&$this, '_doAnchors_inline_callback'), $text);

		#
		# Last, handle reference-style shortcuts: [link text]
		# These must come last in case you've also got [link text][1]
		# or [link text](/foo)
		#
		$text = preg_replace_callback('{
			(					# wrap whole match in $1
			  \[
				([^\[\]]+)		# link text = $2; can\'t contain [ or ]
			  \]
			)
			}xs',
			array(&$this, '_doAnchors_reference_callback'), $text);

		$this->in_anchor = false;
		return $text;
	}
	protected function _doAnchors_reference_callback($matches) {
		$whole_match =  $matches[1];
		$link_text   =  $matches[2];
		$link_id     =& $matches[3];

		if ($link_id == "") {
			# for shortcut links like [this][] or [this].
			$link_id = $link_text;
		}
		
		# lower-case and turn embedded newlines into spaces
		$link_id = strtolower($link_id);
		$link_id = preg_replace('{[ ]?\n}', ' ', $link_id);

		if (isset($this->urls[$link_id])) {
			$url = $this->urls[$link_id];
			$url = $this->encodeAttribute($url);
			
			$result = "<a href=\"$url\"";
			if ( isset( $this->titles[$link_id] ) ) {
				$title = $this->titles[$link_id];
				$title = $this->encodeAttribute($title);
				$result .=  " title=\"$title\"";
			}
			if (isset($this->ref_attr[$link_id]))
				$result .= $this->ref_attr[$link_id];
		
			$link_text = $this->runSpanGamut($link_text);
			$result .= ">$link_text</a>";
			$result = $this->hashPart($result);
		}
		else {
			$result = $whole_match;
		}
		return $result;
	}
	protected function _doAnchors_inline_callback($matches) {
		$whole_match	=  $matches[1];
		$link_text		=  $this->runSpanGamut($matches[2]);
		$url			=  $matches[3] == '' ? $matches[4] : $matches[3];
		$title			=& $matches[7];
		$attr  = $this->doExtraAttributes("a", $dummy =& $matches[8]);


		$url = $this->encodeAttribute($url);

		$result = "<a href=\"$url\"";
		if (isset($title)) {
			$title = $this->encodeAttribute($title);
			$result .=  " title=\"$title\"";
		}
		$result .= $attr;
		
		$link_text = $this->runSpanGamut($link_text);
		$result .= ">$link_text</a>";

		return $this->hashPart($result);
	}


	protected function doImages($text) {
	#
	# Turn Markdown image shortcuts into <img> tags.
	#
		#
		# First, handle reference-style labeled images: ![alt text][id]
		#
		$text = preg_replace_callback('{
			(				# wrap whole match in $1
			  !\[
				('.$this->nested_brackets_re.')		# alt text = $2
			  \]

			  [ ]?				# one optional space
			  (?:\n[ ]*)?		# one optional newline followed by spaces

			  \[
				(.*?)		# id = $3
			  \]

			)
			}xs', 
			array(&$this, '_doImages_reference_callback'), $text);

		#
		# Next, handle inline images:  ![alt text](url "optional title")
		# Don't forget: encode * and _
		#
		$text = preg_replace_callback('{
			(				# wrap whole match in $1
			  !\[
				('.$this->nested_brackets_re.')		# alt text = $2
			  \]
			  \s?			# One optional whitespace character
			  \(			# literal paren
				[ \n]*
				(?:
					<(\S*)>	# src url = $3
				|
					('.$this->nested_url_parenthesis_re.')	# src url = $4
				)
				[ \n]*
				(			# $5
				  ([\'"])	# quote char = $6
				  (.*?)		# title = $7
				  \6		# matching quote
				  [ \n]*
				)?			# title is optional
			  \)
			  (?:[ ]? '.$this->id_class_attr_catch_re.' )?	 # $8 = id/class attributes
			)
			}xs',
			array(&$this, '_doImages_inline_callback'), $text);

		return $text;
	}
	protected function _doImages_reference_callback($matches) {
		$whole_match = $matches[1];
		$alt_text    = $matches[2];
		$link_id     = strtolower($matches[3]);

		if ($link_id == "") {
			$link_id = strtolower($alt_text); # for shortcut links like ![this][].
		}

		$alt_text = $this->encodeAttribute($alt_text);
		if (isset($this->urls[$link_id])) {
			$url = $this->encodeAttribute($this->urls[$link_id]);
			$result = "<img src=\"$url\" alt=\"$alt_text\"";
			if (isset($this->titles[$link_id])) {
				$title = $this->titles[$link_id];
				$title = $this->encodeAttribute($title);
				$result .=  " title=\"$title\"";
			}
			if (isset($this->ref_attr[$link_id]))
				$result .= $this->ref_attr[$link_id];
			$result .= $this->empty_element_suffix;
			$result = $this->hashPart($result);
		}
		else {
			# If there's no such link ID, leave intact:
			$result = $whole_match;
		}

		return $result;
	}
	protected function _doImages_inline_callback($matches) {
		$whole_match	= $matches[1];
		$alt_text		= $matches[2];
		$url			= $matches[3] == '' ? $matches[4] : $matches[3];
		$title			=& $matches[7];
		$attr  = $this->doExtraAttributes("img", $dummy =& $matches[8]);

		$alt_text = $this->encodeAttribute($alt_text);
		$url = $this->encodeAttribute($url);
		$result = "<img src=\"$url\" alt=\"$alt_text\"";
		if (isset($title)) {
			$title = $this->encodeAttribute($title);
			$result .=  " title=\"$title\""; # $title already quoted
		}
		$result .= $attr;
		$result .= $this->empty_element_suffix;

		return $this->hashPart($result);
	}


	protected function doHeaders($text) {
	#
	# Redefined to add id and class attribute support.
	#
		# Setext-style headers:
		#	  Header 1  {#header1}
		#	  ========
		#  
		#	  Header 2  {#header2 .class1 .class2}
		#	  --------
		#
		$text = preg_replace_callback(
			'{
				(^.+?)								# $1: Header text
				(?:[ ]+ '.$this->id_class_attr_catch_re.' )?	 # $3 = id/class attributes
				[ ]*\n(=+|-+)[ ]*\n+				# $3: Header footer
			}mx',
			array(&$this, '_doHeaders_callback_setext'), $text);

		# atx-style headers:
		#	# Header 1        {#header1}
		#	## Header 2       {#header2}
		#	## Header 2 with closing hashes ##  {#header3.class1.class2}
		#	...
		#	###### Header 6   {.class2}
		#
		$text = preg_replace_callback('{
				^(\#{1,6})	# $1 = string of #\'s
				[ ]*
				(.+?)		# $2 = Header text
				[ ]*
				\#*			# optional closing #\'s (not counted)
				(?:[ ]+ '.$this->id_class_attr_catch_re.' )?	 # $3 = id/class attributes
				[ ]*
				\n+
			}xm',
			array(&$this, '_doHeaders_callback_atx'), $text);

		return $text;
	}
	protected function _doHeaders_callback_setext($matches) {
		if ($matches[3] == '-' && preg_match('{^- }', $matches[1]))
			return $matches[0];
		$level = $matches[3]{0} == '=' ? 1 : 2;
		$attr  = $this->doExtraAttributes("h$level", $dummy =& $matches[2]);
		$block = "<h$level$attr>".$this->runSpanGamut($matches[1])."</h$level>";
		return "\n" . $this->hashBlock($block) . "\n\n";
	}
	protected function _doHeaders_callback_atx($matches) {
		$level = strlen($matches[1]);
		$attr  = $this->doExtraAttributes("h$level", $dummy =& $matches[3]);
		$block = "<h$level$attr>".$this->runSpanGamut($matches[2])."</h$level>";
		return "\n" . $this->hashBlock($block) . "\n\n";
	}


	protected function doTables($text) {
	#
	# Form HTML tables.
	#
		$less_than_tab = $this->tab_width - 1;
		#
		# Find tables with leading pipe.
		#
		#	| Header 1 | Header 2
		#	| -------- | --------
		#	| Cell 1   | Cell 2
		#	| Cell 3   | Cell 4
		#
		$text = preg_replace_callback('
			{
				^							# Start of a line
				[ ]{0,'.$less_than_tab.'}	# Allowed whitespace.
				[|]							# Optional leading pipe (present)
				(.+) \n						# $1: Header row (at least one pipe)
				
				[ ]{0,'.$less_than_tab.'}	# Allowed whitespace.
				[|] ([ ]*[-:]+[-| :]*) \n	# $2: Header underline
				
				(							# $3: Cells
					(?>
						[ ]*				# Allowed whitespace.
						[|] .* \n			# Row content.
					)*
				)
				(?=\n|\Z)					# Stop at final double newline.
			}xm',
			array(&$this, '_doTable_leadingPipe_callback'), $text);
		
		#
		# Find tables without leading pipe.
		#
		#	Header 1 | Header 2
		#	-------- | --------
		#	Cell 1   | Cell 2
		#	Cell 3   | Cell 4
		#
		$text = preg_replace_callback('
			{
				^							# Start of a line
				[ ]{0,'.$less_than_tab.'}	# Allowed whitespace.
				(\S.*[|].*) \n				# $1: Header row (at least one pipe)
				
				[ ]{0,'.$less_than_tab.'}	# Allowed whitespace.
				([-:]+[ ]*[|][-| :]*) \n	# $2: Header underline
				
				(							# $3: Cells
					(?>
						.* [|] .* \n		# Row content
					)*
				)
				(?=\n|\Z)					# Stop at final double newline.
			}xm',
			array(&$this, '_DoTable_callback'), $text);

		return $text;
	}
	protected function _doTable_leadingPipe_callback($matches) {
		$head		= $matches[1];
		$underline	= $matches[2];
		$content	= $matches[3];
		
		# Remove leading pipe for each row.
		$content	= preg_replace('/^ *[|]/m', '', $content);
		
		return $this->_doTable_callback(array($matches[0], $head, $underline, $content));
	}
	protected function _doTable_makeAlignAttr($alignname)
	{
		if (empty($this->table_align_class_tmpl))
			return " align=\"$alignname\"";

		$classname = str_replace('%%', $alignname, $this->table_align_class_tmpl);
		return " class=\"$classname\"";
	}
	protected function _doTable_callback($matches) {
		$head		= $matches[1];
		$underline	= $matches[2];
		$content	= $matches[3];

		# Remove any tailing pipes for each line.
		$head		= preg_replace('/[|] *$/m', '', $head);
		$underline	= preg_replace('/[|] *$/m', '', $underline);
		$content	= preg_replace('/[|] *$/m', '', $content);
		
		# Reading alignement from header underline.
		$separators	= preg_split('/ *[|] */', $underline);
		foreach ($separators as $n => $s) {
			if (preg_match('/^ *-+: *$/', $s))
				$attr[$n] = $this->_doTable_makeAlignAttr('right');
			else if (preg_match('/^ *:-+: *$/', $s))
				$attr[$n] = $this->_doTable_makeAlignAttr('center');
			else if (preg_match('/^ *:-+ *$/', $s))
				$attr[$n] = $this->_doTable_makeAlignAttr('left');
			else
				$attr[$n] = '';
		}
		
		# Parsing span elements, including code spans, character escapes, 
		# and inline HTML tags, so that pipes inside those gets ignored.
		$head		= $this->parseSpan($head);
		$headers	= preg_split('/ *[|] */', $head);
		$col_count	= count($headers);
		$attr       = array_pad($attr, $col_count, '');
		
		# Write column headers.
		$text = "<table>\n";
		$text .= "<thead>\n";
		$text .= "<tr>\n";
		foreach ($headers as $n => $header)
			$text .= "  <th$attr[$n]>".$this->runSpanGamut(trim($header))."</th>\n";
		$text .= "</tr>\n";
		$text .= "</thead>\n";
		
		# Split content by row.
		$rows = explode("\n", trim($content, "\n"));
		
		$text .= "<tbody>\n";
		foreach ($rows as $row) {
			# Parsing span elements, including code spans, character escapes, 
			# and inline HTML tags, so that pipes inside those gets ignored.
			$row = $this->parseSpan($row);
			
			# Split row by cell.
			$row_cells = preg_split('/ *[|] */', $row, $col_count);
			$row_cells = array_pad($row_cells, $col_count, '');
			
			$text .= "<tr>\n";
			foreach ($row_cells as $n => $cell)
				$text .= "  <td$attr[$n]>".$this->runSpanGamut(trim($cell))."</td>\n";
			$text .= "</tr>\n";
		}
		$text .= "</tbody>\n";
		$text .= "</table>";
		
		return $this->hashBlock($text) . "\n";
	}

	
	protected function doDefLists($text) {
	#
	# Form HTML definition lists.
	#
		$less_than_tab = $this->tab_width - 1;

		# Re-usable pattern to match any entire dl list:
		$whole_list_re = '(?>
			(								# $1 = whole list
			  (								# $2
				[ ]{0,'.$less_than_tab.'}
				((?>.*\S.*\n)+)				# $3 = defined term
				\n?
				[ ]{0,'.$less_than_tab.'}:[ ]+ # colon starting definition
			  )
			  (?s:.+?)
			  (								# $4
				  \z
				|
				  \n{2,}
				  (?=\S)
				  (?!						# Negative lookahead for another term
					[ ]{0,'.$less_than_tab.'}
					(?: \S.*\n )+?			# defined term
					\n?
					[ ]{0,'.$less_than_tab.'}:[ ]+ # colon starting definition
				  )
				  (?!						# Negative lookahead for another definition
					[ ]{0,'.$less_than_tab.'}:[ ]+ # colon starting definition
				  )
			  )
			)
		)'; // mx

		$text = preg_replace_callback('{
				(?>\A\n?|(?<=\n\n))
				'.$whole_list_re.'
			}mx',
			array(&$this, '_doDefLists_callback'), $text);

		return $text;
	}
	protected function _doDefLists_callback($matches) {
		# Re-usable patterns to match list item bullets and number markers:
		$list = $matches[1];
		
		# Turn double returns into triple returns, so that we can make a
		# paragraph for the last item in a list, if necessary:
		$result = trim($this->processDefListItems($list));
		$result = "<dl>\n" . $result . "\n</dl>";
		return $this->hashBlock($result) . "\n\n";
	}


	protected function processDefListItems($list_str) {
	#
	#	Process the contents of a single definition list, splitting it
	#	into individual term and definition list items.
	#
		$less_than_tab = $this->tab_width - 1;
		
		# trim trailing blank lines:
		$list_str = preg_replace("/\n{2,}\\z/", "\n", $list_str);

		# Process definition terms.
		$list_str = preg_replace_callback('{
			(?>\A\n?|\n\n+)					# leading line
			(								# definition terms = $1
				[ ]{0,'.$less_than_tab.'}	# leading whitespace
				(?!\:[ ]|[ ])				# negative lookahead for a definition
											#   mark (colon) or more whitespace.
				(?> \S.* \n)+?				# actual term (not whitespace).	
			)			
			(?=\n?[ ]{0,3}:[ ])				# lookahead for following line feed 
											#   with a definition mark.
			}xm',
			array(&$this, '_processDefListItems_callback_dt'), $list_str);

		# Process actual definitions.
		$list_str = preg_replace_callback('{
			\n(\n+)?						# leading line = $1
			(								# marker space = $2
				[ ]{0,'.$less_than_tab.'}	# whitespace before colon
				\:[ ]+						# definition mark (colon)
			)
			((?s:.+?))						# definition text = $3
			(?= \n+ 						# stop at next definition mark,
				(?:							# next term or end of text
					[ ]{0,'.$less_than_tab.'} \:[ ]	|
					<dt> | \z
				)						
			)					
			}xm',
			array(&$this, '_processDefListItems_callback_dd'), $list_str);

		return $list_str;
	}
	protected function _processDefListItems_callback_dt($matches) {
		$terms = explode("\n", trim($matches[1]));
		$text = '';
		foreach ($terms as $term) {
			$term = $this->runSpanGamut(trim($term));
			$text .= "\n<dt>" . $term . "</dt>";
		}
		return $text . "\n";
	}
	protected function _processDefListItems_callback_dd($matches) {
		$leading_line	= $matches[1];
		$marker_space	= $matches[2];
		$def			= $matches[3];

		if ($leading_line || preg_match('/\n{2,}/', $def)) {
			# Replace marker with the appropriate whitespace indentation
			$def = str_repeat(' ', strlen($marker_space)) . $def;
			$def = $this->runBlockGamut($this->outdent($def . "\n\n"));
			$def = "\n". $def ."\n";
		}
		else {
			$def = rtrim($def);
			$def = $this->runSpanGamut($this->outdent($def));
		}

		return "\n<dd>" . $def . "</dd>\n";
	}


	protected function doFencedCodeBlocks($text) {
	#
	# Adding the fenced code block syntax to regular Markdown:
	#
	# ~~~
	# Code block
	# ~~~
	#
		$less_than_tab = $this->tab_width;
		
		$text = preg_replace_callback('{
				(?:\n|\A)
				# 1: Opening marker
				(
					(?:~{3,}|`{3,}) # 3 or more tildes/backticks.
				)
				[ ]*
				(?:
					\.?([-_:a-zA-Z0-9]+) # 2: standalone class name
				|
					'.$this->id_class_attr_catch_re.' # 3: Extra attributes
				)?
				[ ]* \n # Whitespace and newline following marker.
				
				# 4: Content
				(
					(?>
						(?!\1 [ ]* \n)	# Not a closing marker.
						.*\n+
					)+
				)
				
				# Closing marker.
				\1 [ ]* (?= \n )
			}xm',
			array(&$this, '_doFencedCodeBlocks_callback'), $text);

		return $text;
	}
	protected function _doFencedCodeBlocks_callback($matches) {
		$classname =& $matches[2];
		$attrs     =& $matches[3];
		$codeblock = $matches[4];
		$codeblock = htmlspecialchars($codeblock, ENT_NOQUOTES);
		$codeblock = preg_replace_callback('/^\n+/',
			array(&$this, '_doFencedCodeBlocks_newlines'), $codeblock);

		if ($classname != "") {
			if ($classname{0} == '.')
				$classname = substr($classname, 1);
			$attr_str = ' class="'.$this->code_class_prefix.$classname.'"';
		} else {
			$attr_str = $this->doExtraAttributes($this->code_attr_on_pre ? "pre" : "code", $attrs);
		}
		$pre_attr_str  = $this->code_attr_on_pre ? $attr_str : '';
		$code_attr_str = $this->code_attr_on_pre ? '' : $attr_str;
		$codeblock  = "<pre$pre_attr_str><code$code_attr_str>$codeblock</code></pre>";
		
		return "\n\n".$this->hashBlock($codeblock)."\n\n";
	}
	protected function _doFencedCodeBlocks_newlines($matches) {
		return str_repeat("<br$this->empty_element_suffix", 
			strlen($matches[0]));
	}


	#
	# Redefining emphasis markers so that emphasis by underscore does not
	# work in the middle of a word.
	#
	protected $em_relist = array(
		''  => '(?:(?<!\*)\*(?!\*)|(?<![a-zA-Z0-9_])_(?!_))(?=\S|$)(?![\.,:;]\s)',
		'*' => '(?<=\S|^)(?<!\*)\*(?!\*)',
		'_' => '(?<=\S|^)(?<!_)_(?![a-zA-Z0-9_])',
		);
	protected $strong_relist = array(
		''   => '(?:(?<!\*)\*\*(?!\*)|(?<![a-zA-Z0-9_])__(?!_))(?=\S|$)(?![\.,:;]\s)',
		'**' => '(?<=\S|^)(?<!\*)\*\*(?!\*)',
		'__' => '(?<=\S|^)(?<!_)__(?![a-zA-Z0-9_])',
		);
	protected $em_strong_relist = array(
		''    => '(?:(?<!\*)\*\*\*(?!\*)|(?<![a-zA-Z0-9_])___(?!_))(?=\S|$)(?![\.,:;]\s)',
		'***' => '(?<=\S|^)(?<!\*)\*\*\*(?!\*)',
		'___' => '(?<=\S|^)(?<!_)___(?![a-zA-Z0-9_])',
		);


	protected function formParagraphs($text) {
	#
	#	Params:
	#		$text - string to process with html <p> tags
	#
		# Strip leading and trailing lines:
		$text = preg_replace('/\A\n+|\n+\z/', '', $text);
		
		$grafs = preg_split('/\n{2,}/', $text, -1, PREG_SPLIT_NO_EMPTY);

		#
		# Wrap <p> tags and unhashify HTML blocks
		#
		foreach ($grafs as $key => $value) {
			$value = trim($this->runSpanGamut($value));
			
			# Check if this should be enclosed in a paragraph.
			# Clean tag hashes & block tag hashes are left alone.
			$is_p = !preg_match('/^B\x1A[0-9]+B|^C\x1A[0-9]+C$/', $value);
			
			if ($is_p) {
				$value = "<p>$value</p>";
			}
			$grafs[$key] = $value;
		}
		
		# Join grafs in one text, then unhash HTML tags. 
		$text = implode("\n\n", $grafs);
		
		# Finish by removing any tag hashes still present in $text.
		$text = $this->unhash($text);
		
		return $text;
	}
	
	
	### Footnotes
	
	protected function stripFootnotes($text) {
	#
	# Strips link definitions from text, stores the URLs and titles in
	# hash references.
	#
		$less_than_tab = $this->tab_width - 1;

		# Link defs are in the form: [^id]: url "optional title"
		$text = preg_replace_callback('{
			^[ ]{0,'.$less_than_tab.'}\[\^(.+?)\][ ]?:	# note_id = $1
			  [ ]*
			  \n?					# maybe *one* newline
			(						# text = $2 (no blank lines allowed)
				(?:					
					.+				# actual text
				|
					\n				# newlines but 
					(?!\[\^.+?\]:\s)# negative lookahead for footnote marker.
					(?!\n+[ ]{0,3}\S)# ensure line is not blank and followed 
									# by non-indented content
				)*
			)		
			}xm',
			array(&$this, '_stripFootnotes_callback'),
			$text);
		return $text;
	}
	protected function _stripFootnotes_callback($matches) {
		$note_id = $this->fn_id_prefix . $matches[1];
		$this->footnotes[$note_id] = $this->outdent($matches[2]);
		return ''; # String that will replace the block
	}


	protected function doFootnotes($text) {
	#
	# Replace footnote references in $text [^id] with a special text-token 
	# which will be replaced by the actual footnote marker in appendFootnotes.
	#
		if (!$this->in_anchor) {
			$text = preg_replace('{\[\^(.+?)\]}', "F\x1Afn:\\1\x1A:", $text);
		}
		return $text;
	}

	
	protected function appendFootnotes($text) {
	#
	# Append footnote list to text.
	#
		$text = preg_replace_callback('{F\x1Afn:(.*?)\x1A:}', 
			array(&$this, '_appendFootnotes_callback'), $text);
	
		if (!empty($this->footnotes_ordered)) {
			$text .= "\n\n";
			$text .= "<div class=\"footnotes\">\n";
			$text .= "<hr". $this->empty_element_suffix ."\n";
			$text .= "<ol>\n\n";

			$attr = "";
			if ($this->fn_backlink_class != "") {
				$class = $this->fn_backlink_class;
				$class = $this->encodeAttribute($class);
				$attr .= " class=\"$class\"";
			}
			if ($this->fn_backlink_title != "") {
				$title = $this->fn_backlink_title;
				$title = $this->encodeAttribute($title);
				$attr .= " title=\"$title\"";
			}
			$num = 0;
			
			while (!empty($this->footnotes_ordered)) {
				$footnote = reset($this->footnotes_ordered);
				$note_id = key($this->footnotes_ordered);
				unset($this->footnotes_ordered[$note_id]);
				$ref_count = $this->footnotes_ref_count[$note_id];
				unset($this->footnotes_ref_count[$note_id]);
				unset($this->footnotes[$note_id]);
				
				$footnote .= "\n"; # Need to append newline before parsing.
				$footnote = $this->runBlockGamut("$footnote\n");				
				$footnote = preg_replace_callback('{F\x1Afn:(.*?)\x1A:}', 
					array(&$this, '_appendFootnotes_callback'), $footnote);
				
				$attr = str_replace("%%", ++$num, $attr);
				$note_id = $this->encodeAttribute($note_id);

				# Prepare backlink, multiple backlinks if multiple references
				$backlink = "<a href=\"#fnref:$note_id\"$attr>&#8617;</a>";
				for ($ref_num = 2; $ref_num <= $ref_count; ++$ref_num) {
					$backlink .= " <a href=\"#fnref$ref_num:$note_id\"$attr>&#8617;</a>";
				}
				# Add backlink to last paragraph; create new paragraph if needed.
				if (preg_match('{</p>$}', $footnote)) {
					$footnote = substr($footnote, 0, -4) . "&#160;$backlink</p>";
				} else {
					$footnote .= "\n\n<p>$backlink</p>";
				}
				
				$text .= "<li id=\"fn:$note_id\">\n";
				$text .= $footnote . "\n";
				$text .= "</li>\n\n";
			}
			
			$text .= "</ol>\n";
			$text .= "</div>";
		}
		return $text;
	}
	protected function _appendFootnotes_callback($matches) {
		$node_id = $this->fn_id_prefix . $matches[1];
		
		# Create footnote marker only if it has a corresponding footnote *and*
		# the footnote hasn't been used by another marker.
		if (isset($this->footnotes[$node_id])) {
			$num =& $this->footnotes_numbers[$node_id];
			if (!isset($num)) {
				# Transfer footnote content to the ordered list and give it its
				# number
				$this->footnotes_ordered[$node_id] = $this->footnotes[$node_id];
				$this->footnotes_ref_count[$node_id] = 1;
				$num = $this->footnote_counter++;
				$ref_count_mark = '';
			} else {
				$ref_count_mark = $this->footnotes_ref_count[$node_id] += 1;
			}

			$attr = "";
			if ($this->fn_link_class != "") {
				$class = $this->fn_link_class;
				$class = $this->encodeAttribute($class);
				$attr .= " class=\"$class\"";
			}
			if ($this->fn_link_title != "") {
				$title = $this->fn_link_title;
				$title = $this->encodeAttribute($title);
				$attr .= " title=\"$title\"";
			}
			
			$attr = str_replace("%%", $num, $attr);
			$node_id = $this->encodeAttribute($node_id);
			
			return
				"<sup id=\"fnref$ref_count_mark:$node_id\">".
				"<a href=\"#fn:$node_id\"$attr>$num</a>".
				"</sup>";
		}
		
		return "[^".$matches[1]."]";
	}
		
	
	### Abbreviations ###
	
	protected function stripAbbreviations($text) {
	#
	# Strips abbreviations from text, stores titles in hash references.
	#
		$less_than_tab = $this->tab_width - 1;

		# Link defs are in the form: [id]*: url "optional title"
		$text = preg_replace_callback('{
			^[ ]{0,'.$less_than_tab.'}\*\[(.+?)\][ ]?:	# abbr_id = $1
			(.*)					# text = $2 (no blank lines allowed)	
			}xm',
			array(&$this, '_stripAbbreviations_callback'),
			$text);
		return $text;
	}
	protected function _stripAbbreviations_callback($matches) {
		$abbr_word = $matches[1];
		$abbr_desc = $matches[2];
		if ($this->abbr_word_re)
			$this->abbr_word_re .= '|';
		$this->abbr_word_re .= preg_quote($abbr_word);
		$this->abbr_desciptions[$abbr_word] = trim($abbr_desc);
		return ''; # String that will replace the block
	}
	
	
	protected function doAbbreviations($text) {
	#
	# Find defined abbreviations in text and wrap them in <abbr> elements.
	#
		if ($this->abbr_word_re) {
			// cannot use the /x modifier because abbr_word_re may 
			// contain significant spaces:
			$text = preg_replace_callback('{'.
				'(?<![\w\x1A])'.
				'(?:'.$this->abbr_word_re.')'.
				'(?![\w\x1A])'.
				'}', 
				array(&$this, '_doAbbreviations_callback'), $text);
		}
		return $text;
	}
	protected function _doAbbreviations_callback($matches) {
		$abbr = $matches[0];
		if (isset($this->abbr_desciptions[$abbr])) {
			$desc = $this->abbr_desciptions[$abbr];
			if (empty($desc)) {
				return $this->hashPart("<abbr>$abbr</abbr>");
			} else {
				$desc = $this->encodeAttribute($desc);
				return $this->hashPart("<abbr title=\"$desc\">$abbr</abbr>");
			}
		} else {
			return $matches[0];
		}
	}

}


}




// vendor/michelf/php-markdown/Michelf/MarkdownExtra.php


#
# Markdown Extra  -  A text-to-HTML conversion tool for web writers
#
# PHP Markdown Extra
# Copyright (c) 2004-2013 Michel Fortin  
# <http://michelf.com/projects/php-markdown/>
#
# Original Markdown
# Copyright (c) 2004-2006 John Gruber  
# <http://daringfireball.net/projects/markdown/>
#
namespace Michelf {


# Just force Michelf/Markdown.php to load. This is needed to load
# the temporary implementation class. See below for details.
\Michelf\Markdown::MARKDOWNLIB_VERSION;

#
# Markdown Extra Parser Class
#
# Note: Currently the implementation resides in the temporary class
# \Michelf\MarkdownExtra_TmpImpl (in the same file as \Michelf\Markdown).
# This makes it easier to propagate the changes between the three different
# packaging styles of PHP Markdown. Once this issue is resolved, the
# _MarkdownExtra_TmpImpl will disappear and this one will contain the code.
#

class MarkdownExtra extends \Michelf\_MarkdownExtra_TmpImpl {

	### Parser Implementation ###

	# Temporarily, the implemenation is in the _MarkdownExtra_TmpImpl class.
	# See note above.

}



}






namespace {

// vendor/pimple/pimple/lib/Pimple.php



/*
 * This file is part of Pimple.
 *
 * Copyright (c) 2009 Fabien Potencier
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * Pimple main class.
 *
 * @package pimple
 * @author  Fabien Potencier
 */
class Pimple implements ArrayAccess
{
    protected $values = array();

    /**
     * Instantiate the container.
     *
     * Objects and parameters can be passed as argument to the constructor.
     *
     * @param array $config The parameters or objects.
     */
    public function __construct (array $config = array())
    {
        $this->values = $config;
    }

    /**
     * Sets a parameter or an object.
     *
     * Objects must be defined as Closures.
     *
     * Allowing any PHP callable leads to difficult to debug problems
     * as function names (strings) are callable (creating a function with
     * the same a name as an existing parameter would break your container).
     *
     * @param string $id    The unique identifier for the parameter or object
     * @param mixed  $value The value of the parameter or a closure to defined an object
     */
    public function offsetSet($id, $value)
    {
        $this->values[$id] = $value;
    }

    /**
     * Gets a parameter or an object.
     *
     * @param string $id The unique identifier for the parameter or object
     *
     * @return mixed The value of the parameter or an object
     *
     * @throws InvalidArgumentException if the identifier is not defined
     */
    public function offsetGet($id)
    {
        if (!array_key_exists($id, $this->values)) {
            throw new InvalidArgumentException(sprintf('Identifier "%s" is not defined.', $id));
        }

        $isFactory = is_object($this->values[$id]) && method_exists($this->values[$id], '__invoke');

        return $isFactory ? $this->values[$id]($this) : $this->values[$id];
    }

    /**
     * Checks if a parameter or an object is set.
     *
     * @param string $id The unique identifier for the parameter or object
     *
     * @return Boolean
     */
    public function offsetExists($id)
    {
        return array_key_exists($id, $this->values);
    }

    /**
     * Unsets a parameter or an object.
     *
     * @param string $id The unique identifier for the parameter or object
     */
    public function offsetUnset($id)
    {
        unset($this->values[$id]);
    }

    /**
     * Returns a closure that stores the result of the given closure for
     * uniqueness in the scope of this instance of Pimple.
     *
     * @param Closure $callable A closure to wrap for uniqueness
     *
     * @return Closure The wrapped closure
     */
    public static function share(Closure $callable)
    {
        return function ($c) use ($callable) {
            static $object;

            if (null === $object) {
                $object = $callable($c);
            }

            return $object;
        };
    }

    /**
     * Protects a callable from being interpreted as a service.
     *
     * This is useful when you want to store a callable as a parameter.
     *
     * @param Closure $callable A closure to protect from being evaluated
     *
     * @return Closure The protected closure
     */
    public static function protect(Closure $callable)
    {
        return function ($c) use ($callable) {
            return $callable;
        };
    }

    /**
     * Gets a parameter or the closure defining an object.
     *
     * @param string $id The unique identifier for the parameter or object
     *
     * @return mixed The value of the parameter or the closure defining an object
     *
     * @throws InvalidArgumentException if the identifier is not defined
     */
    public function raw($id)
    {
        if (!array_key_exists($id, $this->values)) {
            throw new InvalidArgumentException(sprintf('Identifier "%s" is not defined.', $id));
        }

        return $this->values[$id];
    }

    /**
     * Extends an object definition.
     *
     * Useful when you want to extend an existing object definition,
     * without necessarily loading that object.
     *
     * @param string  $id       The unique identifier for the object
     * @param Closure $callable A closure to extend the original
     *
     * @return Closure The wrapped closure
     *
     * @throws InvalidArgumentException if the identifier is not defined
     */
    public function extend($id, Closure $callable)
    {
        if (!array_key_exists($id, $this->values)) {
            throw new InvalidArgumentException(sprintf('Identifier "%s" is not defined.', $id));
        }

        $factory = $this->values[$id];

        if (!($factory instanceof Closure)) {
            throw new InvalidArgumentException(sprintf('Identifier "%s" does not contain an object definition.', $id));
        }

        return $this->values[$id] = function ($c) use ($callable, $factory) {
            return $callable($factory($c), $c);
        };
    }

    /**
     * Returns all defined value names.
     *
     * @return array An array of value names
     */
    public function keys()
    {
        return array_keys($this->values);
    }
}


}




// src/Maki/Markdown.php



namespace Maki {

class Markdown extends \Michelf\MarkdownExtra
{
    public $baseUrl;
	protected $events = [];

    public function __construct()
    {
        // doLink is 20, add base url just before
        $this->span_gamut['doBaseUrl'] = 19;
        $this->span_gamut['doMakiEventToc'] = 20;
        $this->document_gamut['doMakiEvent'] = 4;
        $this->block_gamut['doMakiEvent'] = 4;

        parent::__construct();
    }

    public function doBaseUrl($text)
    {
        // URLs containing "://" are left untouched
        return preg_replace('~(?<!!)(\[.+?\]\()(?!\w++://)(?!#)(\S*(?:\s*+".+?")?\))~', '$1'.$this->baseUrl.'$2', $text);
    }

    public function doMakiEventToc($text)
    {
    	$table = '<div class="event-toc"><span class="event-toc-heading">Events table of contents:</span><ul class="event-toc-list">';
    	foreach ($this->events as $event) {
			$table .= '<li><a href="#event-'.$event.'">'.$event.'</a></li>';
	    }
	    $table .= '</ul></div>';

	    return preg_replace('/(?:\n|\A)\[event-toc\]$/xm', $this->hashPart($table), $text);
    }

	/**
	 * @param $text
	 * @return mixed
	 */
    public function doMakiEvent($text)
    {
    	$markdown = new Markdown();
    	$markdown->baseUrl = $this->baseUrl;

    	$me = $this;
    	return preg_replace_callback('/
	            (?:\n|\A)
	            # 1: Opening marker
	            ```event           
	            \s* \n # Whitespace and newline following marker.
	            # 4: Content
				(
					(?>
						(?!``` [ ]* \n)	# Not a closing marker.
						.*\n+
					)+
				)				
				# Closing marker.
				``` \s* (?= \n )
	        /xm',
		    function($matches) use ($me, $markdown) {
    		    $event = Spyc::YAMLLoadString($matches[1]);

    		    $html = "<div class='event'>";

			    if (isset($event['module'])) {
				    $html .= "<span class='event-module'><span class='event-module-label'>module</span><span class='event-module-name'>{$event['module']}</span></span>";
			    }

    		    if (isset($event['name'])) {
			    	$this->events[] = $event['name'];
			        $html .= "<span class='event-name'><span class='event-name-label'>event name</span><span class='event-name-name'>{$event['name']}</span><a name='event-{$event['name']}' class='event-name-link' href='#{$event['name']}'>#</a></span>";
		        }

		        if (isset($event['description'])) {
			    	$desc = $event['description'];
			    	// Allow description to be markdown.
			    	$desc = $markdown->transform($desc);
			    	$html .= "<span class='event-description'>{$desc}</span>";
		        }

		        if (isset($event['called'])) {
			    	$html .= "<div class='event-called'><span class='event-called-heading'>Called in</span><ul class='event-called-list'>";
			    	foreach ($event['called'] as $where) {
			    		$html .= "<li>{$where}</li>";
				    }
			    	$html .= "</ul></div>";
		        }

		        if (isset($event['arguments'])) {
		            $html .= "<div class='event-arguments'>
						<span class='event-arguments-heading'>Arguments</span>
						<table>
							<tr>
								<th class='event-argument-name'>Name</th>
								<th class='event-argument-type'>Type</th>
								<th class='event-argument-description'>Description</th>
							</tr>
							";

		            foreach ($event['arguments'] as $name => $arg) {
		                $html .= '<tr>';
		                $html .= '<td class="event-argument-name">'.$name.'</td>';
		                $html .= '<td class="event-argument-type">'.$arg['type'].'</td>';
		                $html .= '<td class="event-argument-description">'.$arg['description'].'</td>';
		                $html .= '</tr>';
		            }

			        $html .= "</table></div>";
		        }

    		    return $this->hashBlock($html);
		    }, $text);
    }
}

}




// src/Maki/Spyc.php



namespace Maki {

/**
 * Spyc -- A Simple PHP YAML Class
 * @version 0.6.2
 * @author Vlad Andersen <vlad.andersen@gmail.com>
 * @author Chris Wanstrath <chris@ozmm.org>
 * @link https://github.com/mustangostang/spyc/
 * @copyright Copyright 2005-2006 Chris Wanstrath, 2006-2011 Vlad Andersen
 * @license http://www.opensource.org/licenses/mit-license.php MIT License
 * @package Spyc
 */

if (!function_exists('spyc_load')) {
	/**
	 * Parses YAML to array.
	 * @param string $string YAML string.
	 * @return array
	 */
	function spyc_load ($string) {
		return Spyc::YAMLLoadString($string);
	}
}

if (!function_exists('spyc_load_file')) {
	/**
	 * Parses YAML to array.
	 * @param string $file Path to YAML file.
	 * @return array
	 */
	function spyc_load_file ($file) {
		return Spyc::YAMLLoad($file);
	}
}

if (!function_exists('spyc_dump')) {
	/**
	 * Dumps array to YAML.
	 * @param array $data Array.
	 * @return string
	 */
	function spyc_dump ($data) {
		return Spyc::YAMLDump($data, false, false, true);
	}
}

if (!class_exists('Spyc')) {

	/**
	 * The Simple PHP YAML Class.
	 *
	 * This class can be used to read a YAML file and convert its contents
	 * into a PHP array.  It currently supports a very limited subsection of
	 * the YAML spec.
	 *
	 * Usage:
	 * <code>
	 *   $Spyc  = new Spyc;
	 *   $array = $Spyc->load($file);
	 * </code>
	 * or:
	 * <code>
	 *   $array = Spyc::YAMLLoad($file);
	 * </code>
	 * or:
	 * <code>
	 *   $array = spyc_load_file($file);
	 * </code>
	 * @package Spyc
	 */
	class Spyc {

		// SETTINGS

		const REMPTY = "\0\0\0\0\0";

		/**
		 * Setting this to true will force YAMLDump to enclose any string value in
		 * quotes.  False by default.
		 *
		 * @var bool
		 */
		public $setting_dump_force_quotes = false;

		/**
		 * Setting this to true will forse YAMLLoad to use syck_load function when
		 * possible. False by default.
		 * @var bool
		 */
		public $setting_use_syck_is_possible = false;



		/**#@+
		 * @access private
		 * @var mixed
		 */
		private $_dumpIndent;
		private $_dumpWordWrap;
		private $_containsGroupAnchor = false;
		private $_containsGroupAlias = false;
		private $path;
		private $result;
		private $LiteralPlaceHolder = '___YAML_Literal_Block___';
		private $SavedGroups = array();
		private $indent;
		/**
		 * Path modifier that should be applied after adding current element.
		 * @var array
		 */
		private $delayedPath = array();

		/**#@+
		 * @access public
		 * @var mixed
		 */
		public $_nodeId;

		/**
		 * Load a valid YAML string to Spyc.
		 * @param string $input
		 * @return array
		 */
		public function load ($input) {
			return $this->_loadString($input);
		}

		/**
		 * Load a valid YAML file to Spyc.
		 * @param string $file
		 * @return array
		 */
		public function loadFile ($file) {
			return $this->_load($file);
		}

		/**
		 * Load YAML into a PHP array statically
		 *
		 * The load method, when supplied with a YAML stream (string or file),
		 * will do its best to convert YAML in a file into a PHP array.  Pretty
		 * simple.
		 *  Usage:
		 *  <code>
		 *   $array = Spyc::YAMLLoad('lucky.yaml');
		 *   print_r($array);
		 *  </code>
		 * @access public
		 * @return array
		 * @param string $input Path of YAML file or string containing YAML
		 */
		public static function YAMLLoad($input) {
			$Spyc = new Spyc;
			return $Spyc->_load($input);
		}

		/**
		 * Load a string of YAML into a PHP array statically
		 *
		 * The load method, when supplied with a YAML string, will do its best
		 * to convert YAML in a string into a PHP array.  Pretty simple.
		 *
		 * Note: use this function if you don't want files from the file system
		 * loaded and processed as YAML.  This is of interest to people concerned
		 * about security whose input is from a string.
		 *
		 *  Usage:
		 *  <code>
		 *   $array = Spyc::YAMLLoadString("---\n0: hello world\n");
		 *   print_r($array);
		 *  </code>
		 * @access public
		 * @return array
		 * @param string $input String containing YAML
		 */
		public static function YAMLLoadString($input) {
			$Spyc = new Spyc;
			return $Spyc->_loadString($input);
		}

		/**
		 * Dump YAML from PHP array statically
		 *
		 * The dump method, when supplied with an array, will do its best
		 * to convert the array into friendly YAML.  Pretty simple.  Feel free to
		 * save the returned string as nothing.yaml and pass it around.
		 *
		 * Oh, and you can decide how big the indent is and what the wordwrap
		 * for folding is.  Pretty cool -- just pass in 'false' for either if
		 * you want to use the default.
		 *
		 * Indent's default is 2 spaces, wordwrap's default is 40 characters.  And
		 * you can turn off wordwrap by passing in 0.
		 *
		 * @access public
		 * @return string
		 * @param array|\stdClass $array PHP array
		 * @param int $indent Pass in false to use the default, which is 2
		 * @param int $wordwrap Pass in 0 for no wordwrap, false for default (40)
		 * @param bool $no_opening_dashes Do not start YAML file with "---\n"
		 */
		public static function YAMLDump($array, $indent = false, $wordwrap = false, $no_opening_dashes = false) {
			$spyc = new Spyc;
			return $spyc->dump($array, $indent, $wordwrap, $no_opening_dashes);
		}


		/**
		 * Dump PHP array to YAML
		 *
		 * The dump method, when supplied with an array, will do its best
		 * to convert the array into friendly YAML.  Pretty simple.  Feel free to
		 * save the returned string as tasteful.yaml and pass it around.
		 *
		 * Oh, and you can decide how big the indent is and what the wordwrap
		 * for folding is.  Pretty cool -- just pass in 'false' for either if
		 * you want to use the default.
		 *
		 * Indent's default is 2 spaces, wordwrap's default is 40 characters.  And
		 * you can turn off wordwrap by passing in 0.
		 *
		 * @access public
		 * @return string
		 * @param array $array PHP array
		 * @param int $indent Pass in false to use the default, which is 2
		 * @param int $wordwrap Pass in 0 for no wordwrap, false for default (40)
		 */
		public function dump($array,$indent = false,$wordwrap = false, $no_opening_dashes = false) {
			// Dumps to some very clean YAML.  We'll have to add some more features
			// and options soon.  And better support for folding.

			// New features and options.
			if ($indent === false or !is_numeric($indent)) {
				$this->_dumpIndent = 2;
			} else {
				$this->_dumpIndent = $indent;
			}

			if ($wordwrap === false or !is_numeric($wordwrap)) {
				$this->_dumpWordWrap = 40;
			} else {
				$this->_dumpWordWrap = $wordwrap;
			}

			// New YAML document
			$string = "";
			if (!$no_opening_dashes) $string = "---\n";

			// Start at the base of the array and move through it.
			if ($array) {
				$array = (array)$array;
				$previous_key = -1;
				foreach ($array as $key => $value) {
					if (!isset($first_key)) $first_key = $key;
					$string .= $this->_yamlize($key,$value,0,$previous_key, $first_key, $array);
					$previous_key = $key;
				}
			}
			return $string;
		}

		/**
		 * Attempts to convert a key / value array item to YAML
		 * @access private
		 * @return string
		 * @param $key The name of the key
		 * @param $value The value of the item
		 * @param $indent The indent of the current node
		 */
		private function _yamlize($key,$value,$indent, $previous_key = -1, $first_key = 0, $source_array = null) {
			if(is_object($value)) $value = (array)$value;
			if (is_array($value)) {
				if (empty ($value))
					return $this->_dumpNode($key, array(), $indent, $previous_key, $first_key, $source_array);
				// It has children.  What to do?
				// Make it the right kind of item
				$string = $this->_dumpNode($key, self::REMPTY, $indent, $previous_key, $first_key, $source_array);
				// Add the indent
				$indent += $this->_dumpIndent;
				// Yamlize the array
				$string .= $this->_yamlizeArray($value,$indent);
			} elseif (!is_array($value)) {
				// It doesn't have children.  Yip.
				$string = $this->_dumpNode($key, $value, $indent, $previous_key, $first_key, $source_array);
			}
			return $string;
		}

		/**
		 * Attempts to convert an array to YAML
		 * @access private
		 * @return string
		 * @param $array The array you want to convert
		 * @param $indent The indent of the current level
		 */
		private function _yamlizeArray($array,$indent) {
			if (is_array($array)) {
				$string = '';
				$previous_key = -1;
				foreach ($array as $key => $value) {
					if (!isset($first_key)) $first_key = $key;
					$string .= $this->_yamlize($key, $value, $indent, $previous_key, $first_key, $array);
					$previous_key = $key;
				}
				return $string;
			} else {
				return false;
			}
		}

		/**
		 * Returns YAML from a key and a value
		 * @access private
		 * @return string
		 * @param $key The name of the key
		 * @param $value The value of the item
		 * @param $indent The indent of the current node
		 */
		private function _dumpNode($key, $value, $indent, $previous_key = -1, $first_key = 0, $source_array = null) {
			// do some folding here, for blocks
			if (is_string ($value) && ((strpos($value,"\n") !== false || strpos($value,": ") !== false || strpos($value,"- ") !== false ||
			                            strpos($value,"*") !== false || strpos($value,"#") !== false || strpos($value,"<") !== false || strpos($value,">") !== false || strpos ($value, '%') !== false || strpos ($value, '  ') !== false ||
			                            strpos($value,"[") !== false || strpos($value,"]") !== false || strpos($value,"{") !== false || strpos($value,"}") !== false) || strpos($value,"&") !== false || strpos($value, "'") !== false || strpos($value, "!") === 0 ||
			                           substr ($value, -1, 1) == ':')
			) {
				$value = $this->_doLiteralBlock($value,$indent);
			} else {
				$value  = $this->_doFolding($value,$indent);
			}

			if ($value === array()) $value = '[ ]';
			if ($value === "") $value = '""';
			if (self::isTranslationWord($value)) {
				$value = $this->_doLiteralBlock($value, $indent);
			}
			if (trim ($value) != $value)
				$value = $this->_doLiteralBlock($value,$indent);

			if (is_bool($value)) {
				$value = $value ? "true" : "false";
			}

			if ($value === null) $value = 'null';
			if ($value === "'" . self::REMPTY . "'") $value = null;

			$spaces = str_repeat(' ',$indent);

			//if (is_int($key) && $key - 1 == $previous_key && $first_key===0) {
			if (is_array ($source_array) && array_keys($source_array) === range(0, count($source_array) - 1)) {
				// It's a sequence
				$string = $spaces.'- '.$value."\n";
			} else {
				// if ($first_key===0)  throw new Exception('Keys are all screwy.  The first one was zero, now it\'s "'. $key .'"');
				// It's mapped
				if (strpos($key, ":") !== false || strpos($key, "#") !== false) { $key = '"' . $key . '"'; }
				$string = rtrim ($spaces.$key.': '.$value)."\n";
			}
			return $string;
		}

		/**
		 * Creates a literal block for dumping
		 * @access private
		 * @return string
		 * @param $value
		 * @param $indent int The value of the indent
		 */
		private function _doLiteralBlock($value,$indent) {
			if ($value === "\n") return '\n';
			if (strpos($value, "\n") === false && strpos($value, "'") === false) {
				return sprintf ("'%s'", $value);
			}
			if (strpos($value, "\n") === false && strpos($value, '"') === false) {
				return sprintf ('"%s"', $value);
			}
			$exploded = explode("\n",$value);
			$newValue = '|';
			if (isset($exploded[0]) && ($exploded[0] == "|" || $exploded[0] == "|-" || $exploded[0] == ">")) {
				$newValue = $exploded[0];
				unset($exploded[0]);
			}
			$indent += $this->_dumpIndent;
			$spaces   = str_repeat(' ',$indent);
			foreach ($exploded as $line) {
				$line = trim($line);
				if (strpos($line, '"') === 0 && strrpos($line, '"') == (strlen($line)-1) || strpos($line, "'") === 0 && strrpos($line, "'") == (strlen($line)-1)) {
					$line = substr($line, 1, -1);
				}
				$newValue .= "\n" . $spaces . ($line);
			}
			return $newValue;
		}

		/**
		 * Folds a string of text, if necessary
		 * @access private
		 * @return string
		 * @param $value The string you wish to fold
		 */
		private function _doFolding($value,$indent) {
			// Don't do anything if wordwrap is set to 0

			if ($this->_dumpWordWrap !== 0 && is_string ($value) && strlen($value) > $this->_dumpWordWrap) {
				$indent += $this->_dumpIndent;
				$indent = str_repeat(' ',$indent);
				$wrapped = wordwrap($value,$this->_dumpWordWrap,"\n$indent");
				$value   = ">\n".$indent.$wrapped;
			} else {
				if ($this->setting_dump_force_quotes && is_string ($value) && $value !== self::REMPTY)
					$value = '"' . $value . '"';
				if (is_numeric($value) && is_string($value))
					$value = '"' . $value . '"';
			}


			return $value;
		}

		private function isTrueWord($value) {
			$words = self::getTranslations(array('true', 'on', 'yes', 'y'));
			return in_array($value, $words, true);
		}

		private function isFalseWord($value) {
			$words = self::getTranslations(array('false', 'off', 'no', 'n'));
			return in_array($value, $words, true);
		}

		private function isNullWord($value) {
			$words = self::getTranslations(array('null', '~'));
			return in_array($value, $words, true);
		}

		private function isTranslationWord($value) {
			return (
				self::isTrueWord($value)  ||
				self::isFalseWord($value) ||
				self::isNullWord($value)
			);
		}

		/**
		 * Coerce a string into a native type
		 * Reference: http://yaml.org/type/bool.html
		 * TODO: Use only words from the YAML spec.
		 * @access private
		 * @param $value The value to coerce
		 */
		private function coerceValue(&$value) {
			if (self::isTrueWord($value)) {
				$value = true;
			} else if (self::isFalseWord($value)) {
				$value = false;
			} else if (self::isNullWord($value)) {
				$value = null;
			}
		}

		/**
		 * Given a set of words, perform the appropriate translations on them to
		 * match the YAML 1.1 specification for type coercing.
		 * @param $words The words to translate
		 * @access private
		 */
		private static function getTranslations(array $words) {
			$result = array();
			foreach ($words as $i) {
				$result = array_merge($result, array(ucfirst($i), strtoupper($i), strtolower($i)));
			}
			return $result;
		}

// LOADING FUNCTIONS

		private function _load($input) {
			$Source = $this->loadFromSource($input);
			return $this->loadWithSource($Source);
		}

		private function _loadString($input) {
			$Source = $this->loadFromString($input);
			return $this->loadWithSource($Source);
		}

		private function loadWithSource($Source) {
			if (empty ($Source)) return array();
			if ($this->setting_use_syck_is_possible && function_exists ('syck_load')) {
				$array = syck_load (implode ("\n", $Source));
				return is_array($array) ? $array : array();
			}

			$this->path = array();
			$this->result = array();

			$cnt = count($Source);
			for ($i = 0; $i < $cnt; $i++) {
				$line = $Source[$i];

				$this->indent = strlen($line) - strlen(ltrim($line));
				$tempPath = $this->getParentPathByIndent($this->indent);
				$line = self::stripIndent($line, $this->indent);
				if (self::isComment($line)) continue;
				if (self::isEmpty($line)) continue;
				$this->path = $tempPath;

				$literalBlockStyle = self::startsLiteralBlock($line);
				if ($literalBlockStyle) {
					$line = rtrim ($line, $literalBlockStyle . " \n");
					$literalBlock = '';
					$line .= ' '.$this->LiteralPlaceHolder;
					$literal_block_indent = strlen($Source[$i+1]) - strlen(ltrim($Source[$i+1]));
					while (++$i < $cnt && $this->literalBlockContinues($Source[$i], $this->indent)) {
						$literalBlock = $this->addLiteralLine($literalBlock, $Source[$i], $literalBlockStyle, $literal_block_indent);
					}
					$i--;
				}

				// Strip out comments
				if (strpos ($line, '#')) {
					$line = preg_replace('/\s*#([^"\']+)$/','',$line);
				}

				while (++$i < $cnt && self::greedilyNeedNextLine($line)) {
					$line = rtrim ($line, " \n\t\r") . ' ' . ltrim ($Source[$i], " \t");
				}
				$i--;

				$lineArray = $this->_parseLine($line);

				if ($literalBlockStyle)
					$lineArray = $this->revertLiteralPlaceHolder ($lineArray, $literalBlock);

				$this->addArray($lineArray, $this->indent);

				foreach ($this->delayedPath as $indent => $delayedPath)
					$this->path[$indent] = $delayedPath;

				$this->delayedPath = array();

			}
			return $this->result;
		}

		private function loadFromSource ($input) {
			if (!empty($input) && strpos($input, "\n") === false && file_exists($input))
				$input = file_get_contents($input);

			return $this->loadFromString($input);
		}

		private function loadFromString ($input) {
			$lines = explode("\n",$input);
			foreach ($lines as $k => $_) {
				$lines[$k] = rtrim ($_, "\r");
			}
			return $lines;
		}

		/**
		 * Parses YAML code and returns an array for a node
		 * @access private
		 * @return array
		 * @param string $line A line from the YAML file
		 */
		private function _parseLine($line) {
			if (!$line) return array();
			$line = trim($line);
			if (!$line) return array();

			$array = array();

			$group = $this->nodeContainsGroup($line);
			if ($group) {
				$this->addGroup($line, $group);
				$line = $this->stripGroup ($line, $group);
			}

			if ($this->startsMappedSequence($line))
				return $this->returnMappedSequence($line);

			if ($this->startsMappedValue($line))
				return $this->returnMappedValue($line);

			if ($this->isArrayElement($line))
				return $this->returnArrayElement($line);

			if ($this->isPlainArray($line))
				return $this->returnPlainArray($line);


			return $this->returnKeyValuePair($line);

		}

		/**
		 * Finds the type of the passed value, returns the value as the new type.
		 * @access private
		 * @param string $value
		 * @return mixed
		 */
		private function _toType($value) {
			if ($value === '') return "";
			$first_character = $value[0];
			$last_character = substr($value, -1, 1);

			$is_quoted = false;
			do {
				if (!$value) break;
				if ($first_character != '"' && $first_character != "'") break;
				if ($last_character != '"' && $last_character != "'") break;
				$is_quoted = true;
			} while (0);

			if ($is_quoted) {
				$value = str_replace('\n', "\n", $value);
				if ($first_character == "'")
					return strtr(substr ($value, 1, -1), array ('\'\'' => '\'', '\\\''=> '\''));
				return strtr(substr ($value, 1, -1), array ('\\"' => '"', '\\\''=> '\''));
			}

			if (strpos($value, ' #') !== false && !$is_quoted)
				$value = preg_replace('/\s+#(.+)$/','',$value);

			if ($first_character == '[' && $last_character == ']') {
				// Take out strings sequences and mappings
				$innerValue = trim(substr ($value, 1, -1));
				if ($innerValue === '') return array();
				$explode = $this->_inlineEscape($innerValue);
				// Propagate value array
				$value  = array();
				foreach ($explode as $v) {
					$value[] = $this->_toType($v);
				}
				return $value;
			}

			if (strpos($value,': ')!==false && $first_character != '{') {
				$array = explode(': ',$value);
				$key   = trim($array[0]);
				array_shift($array);
				$value = trim(implode(': ',$array));
				$value = $this->_toType($value);
				return array($key => $value);
			}

			if ($first_character == '{' && $last_character == '}') {
				$innerValue = trim(substr ($value, 1, -1));
				if ($innerValue === '') return array();
				// Inline Mapping
				// Take out strings sequences and mappings
				$explode = $this->_inlineEscape($innerValue);
				// Propagate value array
				$array = array();
				foreach ($explode as $v) {
					$SubArr = $this->_toType($v);
					if (empty($SubArr)) continue;
					if (is_array ($SubArr)) {
						$array[key($SubArr)] = $SubArr[key($SubArr)]; continue;
					}
					$array[] = $SubArr;
				}
				return $array;
			}

			if ($value == 'null' || $value == 'NULL' || $value == 'Null' || $value == '' || $value == '~') {
				return null;
			}

			if ( is_numeric($value) && preg_match ('/^(-|)[1-9]+[0-9]*$/', $value) ){
				$intvalue = (int)$value;
				if ($intvalue != PHP_INT_MAX && $intvalue != ~PHP_INT_MAX)
					$value = $intvalue;
				return $value;
			}

			if ( is_string($value) && preg_match('/^0[xX][0-9a-fA-F]+$/', $value)) {
				// Hexadecimal value.
				return hexdec($value);
			}

			$this->coerceValue($value);

			if (is_numeric($value)) {
				if ($value === '0') return 0;
				if (rtrim ($value, 0) === $value)
					$value = (float)$value;
				return $value;
			}

			return $value;
		}

		/**
		 * Used in inlines to check for more inlines or quoted strings
		 * @access private
		 * @return array
		 */
		private function _inlineEscape($inline) {
			// There's gotta be a cleaner way to do this...
			// While pure sequences seem to be nesting just fine,
			// pure mappings and mappings with sequences inside can't go very
			// deep.  This needs to be fixed.

			$seqs = array();
			$maps = array();
			$saved_strings = array();
			$saved_empties = array();

			// Check for empty strings
			$regex = '/("")|(\'\')/';
			if (preg_match_all($regex,$inline,$strings)) {
				$saved_empties = $strings[0];
				$inline  = preg_replace($regex,'YAMLEmpty',$inline);
			}
			unset($regex);

			// Check for strings
			$regex = '/(?:(")|(?:\'))((?(1)[^"]+|[^\']+))(?(1)"|\')/';
			if (preg_match_all($regex,$inline,$strings)) {
				$saved_strings = $strings[0];
				$inline  = preg_replace($regex,'YAMLString',$inline);
			}
			unset($regex);

			// echo $inline;

			$i = 0;
			do {

				// Check for sequences
				while (preg_match('/\[([^{}\[\]]+)\]/U',$inline,$matchseqs)) {
					$seqs[] = $matchseqs[0];
					$inline = preg_replace('/\[([^{}\[\]]+)\]/U', ('YAMLSeq' . (count($seqs) - 1) . 's'), $inline, 1);
				}

				// Check for mappings
				while (preg_match('/{([^\[\]{}]+)}/U',$inline,$matchmaps)) {
					$maps[] = $matchmaps[0];
					$inline = preg_replace('/{([^\[\]{}]+)}/U', ('YAMLMap' . (count($maps) - 1) . 's'), $inline, 1);
				}

				if ($i++ >= 10) break;

			} while (strpos ($inline, '[') !== false || strpos ($inline, '{') !== false);

			$explode = explode(',',$inline);
			$explode = array_map('trim', $explode);
			$stringi = 0; $i = 0;

			while (1) {

				// Re-add the sequences
				if (!empty($seqs)) {
					foreach ($explode as $key => $value) {
						if (strpos($value,'YAMLSeq') !== false) {
							foreach ($seqs as $seqk => $seq) {
								$explode[$key] = str_replace(('YAMLSeq'.$seqk.'s'),$seq,$value);
								$value = $explode[$key];
							}
						}
					}
				}

				// Re-add the mappings
				if (!empty($maps)) {
					foreach ($explode as $key => $value) {
						if (strpos($value,'YAMLMap') !== false) {
							foreach ($maps as $mapk => $map) {
								$explode[$key] = str_replace(('YAMLMap'.$mapk.'s'), $map, $value);
								$value = $explode[$key];
							}
						}
					}
				}


				// Re-add the strings
				if (!empty($saved_strings)) {
					foreach ($explode as $key => $value) {
						while (strpos($value,'YAMLString') !== false) {
							$explode[$key] = preg_replace('/YAMLString/',$saved_strings[$stringi],$value, 1);
							unset($saved_strings[$stringi]);
							++$stringi;
							$value = $explode[$key];
						}
					}
				}


				// Re-add the empties
				if (!empty($saved_empties)) {
					foreach ($explode as $key => $value) {
						while (strpos($value,'YAMLEmpty') !== false) {
							$explode[$key] = preg_replace('/YAMLEmpty/', '', $value, 1);
							$value = $explode[$key];
						}
					}
				}

				$finished = true;
				foreach ($explode as $key => $value) {
					if (strpos($value,'YAMLSeq') !== false) {
						$finished = false; break;
					}
					if (strpos($value,'YAMLMap') !== false) {
						$finished = false; break;
					}
					if (strpos($value,'YAMLString') !== false) {
						$finished = false; break;
					}
					if (strpos($value,'YAMLEmpty') !== false) {
						$finished = false; break;
					}
				}
				if ($finished) break;

				$i++;
				if ($i > 10)
					break; // Prevent infinite loops.
			}


			return $explode;
		}

		private function literalBlockContinues ($line, $lineIndent) {
			if (!trim($line)) return true;
			if (strlen($line) - strlen(ltrim($line)) > $lineIndent) return true;
			return false;
		}

		private function referenceContentsByAlias ($alias) {
			do {
				if (!isset($this->SavedGroups[$alias])) { echo "Bad group name: $alias."; break; }
				$groupPath = $this->SavedGroups[$alias];
				$value = $this->result;
				foreach ($groupPath as $k) {
					$value = $value[$k];
				}
			} while (false);
			return $value;
		}

		private function addArrayInline ($array, $indent) {
			$CommonGroupPath = $this->path;
			if (empty ($array)) return false;

			foreach ($array as $k => $_) {
				$this->addArray(array($k => $_), $indent);
				$this->path = $CommonGroupPath;
			}
			return true;
		}

		private function addArray ($incoming_data, $incoming_indent) {

			// print_r ($incoming_data);

			if (count ($incoming_data) > 1)
				return $this->addArrayInline ($incoming_data, $incoming_indent);

			$key = key ($incoming_data);
			$value = isset($incoming_data[$key]) ? $incoming_data[$key] : null;
			if ($key === '__!YAMLZero') $key = '0';

			if ($incoming_indent == 0 && !$this->_containsGroupAlias && !$this->_containsGroupAnchor) { // Shortcut for root-level values.
				if ($key || $key === '' || $key === '0') {
					$this->result[$key] = $value;
				} else {
					$this->result[] = $value; end ($this->result); $key = key ($this->result);
				}
				$this->path[$incoming_indent] = $key;
				return;
			}



			$history = array();
			// Unfolding inner array tree.
			$history[] = $_arr = $this->result;
			foreach ($this->path as $k) {
				$history[] = $_arr = $_arr[$k];
			}

			if ($this->_containsGroupAlias) {
				$value = $this->referenceContentsByAlias($this->_containsGroupAlias);
				$this->_containsGroupAlias = false;
			}


			// Adding string or numeric key to the innermost level or $this->arr.
			if (is_string($key) && $key == '<<') {
				if (!is_array ($_arr)) { $_arr = array (); }

				$_arr = array_merge ($_arr, $value);
			} else if ($key || $key === '' || $key === '0') {
				if (!is_array ($_arr))
					$_arr = array ($key=>$value);
				else
					$_arr[$key] = $value;
			} else {
				if (!is_array ($_arr)) { $_arr = array ($value); $key = 0; }
				else { $_arr[] = $value; end ($_arr); $key = key ($_arr); }
			}

			$reverse_path = array_reverse($this->path);
			$reverse_history = array_reverse ($history);
			$reverse_history[0] = $_arr;
			$cnt = count($reverse_history) - 1;
			for ($i = 0; $i < $cnt; $i++) {
				$reverse_history[$i+1][$reverse_path[$i]] = $reverse_history[$i];
			}
			$this->result = $reverse_history[$cnt];

			$this->path[$incoming_indent] = $key;

			if ($this->_containsGroupAnchor) {
				$this->SavedGroups[$this->_containsGroupAnchor] = $this->path;
				if (is_array ($value)) {
					$k = key ($value);
					if (!is_int ($k)) {
						$this->SavedGroups[$this->_containsGroupAnchor][$incoming_indent + 2] = $k;
					}
				}
				$this->_containsGroupAnchor = false;
			}

		}

		private static function startsLiteralBlock ($line) {
			$lastChar = substr (trim($line), -1);
			if ($lastChar != '>' && $lastChar != '|') return false;
			if ($lastChar == '|') return $lastChar;
			// HTML tags should not be counted as literal blocks.
			if (preg_match ('#<.*?>$#', $line)) return false;
			return $lastChar;
		}

		private static function greedilyNeedNextLine($line) {
			$line = trim ($line);
			if (!strlen($line)) return false;
			if (substr ($line, -1, 1) == ']') return false;
			if ($line[0] == '[') return true;
			if (preg_match ('#^[^:]+?:\s*\[#', $line)) return true;
			return false;
		}

		private function addLiteralLine ($literalBlock, $line, $literalBlockStyle, $indent = -1) {
			$line = self::stripIndent($line, $indent);
			if ($literalBlockStyle !== '|') {
				$line = self::stripIndent($line);
			}
			$line = rtrim ($line, "\r\n\t ") . "\n";
			if ($literalBlockStyle == '|') {
				return $literalBlock . $line;
			}
			if (strlen($line) == 0)
				return rtrim($literalBlock, ' ') . "\n";
			if ($line == "\n" && $literalBlockStyle == '>') {
				return rtrim ($literalBlock, " \t") . "\n";
			}
			if ($line != "\n")
				$line = trim ($line, "\r\n ") . " ";
			return $literalBlock . $line;
		}

		function revertLiteralPlaceHolder ($lineArray, $literalBlock) {
			foreach ($lineArray as $k => $_) {
				if (is_array($_))
					$lineArray[$k] = $this->revertLiteralPlaceHolder ($_, $literalBlock);
				else if (substr($_, -1 * strlen ($this->LiteralPlaceHolder)) == $this->LiteralPlaceHolder)
					$lineArray[$k] = rtrim ($literalBlock, " \r\n");
			}
			return $lineArray;
		}

		private static function stripIndent ($line, $indent = -1) {
			if ($indent == -1) $indent = strlen($line) - strlen(ltrim($line));
			return substr ($line, $indent);
		}

		private function getParentPathByIndent ($indent) {
			if ($indent == 0) return array();
			$linePath = $this->path;
			do {
				end($linePath); $lastIndentInParentPath = key($linePath);
				if ($indent <= $lastIndentInParentPath) array_pop ($linePath);
			} while ($indent <= $lastIndentInParentPath);
			return $linePath;
		}


		private function clearBiggerPathValues ($indent) {


			if ($indent == 0) $this->path = array();
			if (empty ($this->path)) return true;

			foreach ($this->path as $k => $_) {
				if ($k > $indent) unset ($this->path[$k]);
			}

			return true;
		}


		private static function isComment ($line) {
			if (!$line) return false;
			if ($line[0] == '#') return true;
			if (trim($line, " \r\n\t") == '---') return true;
			return false;
		}

		private static function isEmpty ($line) {
			return (trim ($line) === '');
		}


		private function isArrayElement ($line) {
			if (!$line || !is_scalar($line)) return false;
			if (substr($line, 0, 2) != '- ') return false;
			if (strlen ($line) > 3)
				if (substr($line,0,3) == '---') return false;

			return true;
		}

		private function isHashElement ($line) {
			return strpos($line, ':');
		}

		private function isLiteral ($line) {
			if ($this->isArrayElement($line)) return false;
			if ($this->isHashElement($line)) return false;
			return true;
		}


		private static function unquote ($value) {
			if (!$value) return $value;
			if (!is_string($value)) return $value;
			if ($value[0] == '\'') return trim ($value, '\'');
			if ($value[0] == '"') return trim ($value, '"');
			return $value;
		}

		private function startsMappedSequence ($line) {
			return (substr($line, 0, 2) == '- ' && substr ($line, -1, 1) == ':');
		}

		private function returnMappedSequence ($line) {
			$array = array();
			$key         = self::unquote(trim(substr($line,1,-1)));
			$array[$key] = array();
			$this->delayedPath = array(strpos ($line, $key) + $this->indent => $key);
			return array($array);
		}

		private function checkKeysInValue($value) {
			if (strchr('[{"\'', $value[0]) === false) {
				if (strchr($value, ': ') !== false) {
					throw new Exception('Too many keys: '.$value);
				}
			}
		}

		private function returnMappedValue ($line) {
			$this->checkKeysInValue($line);
			$array = array();
			$key         = self::unquote (trim(substr($line,0,-1)));
			$array[$key] = '';
			return $array;
		}

		private function startsMappedValue ($line) {
			return (substr ($line, -1, 1) == ':');
		}

		private function isPlainArray ($line) {
			return ($line[0] == '[' && substr ($line, -1, 1) == ']');
		}

		private function returnPlainArray ($line) {
			return $this->_toType($line);
		}

		private function returnKeyValuePair ($line) {
			$array = array();
			$key = '';
			if (strpos ($line, ': ')) {
				// It's a key/value pair most likely
				// If the key is in double quotes pull it out
				if (($line[0] == '"' || $line[0] == "'") && preg_match('/^(["\'](.*)["\'](\s)*:)/',$line,$matches)) {
					$value = trim(str_replace($matches[1],'',$line));
					$key   = $matches[2];
				} else {
					// Do some guesswork as to the key and the value
					$explode = explode(': ', $line);
					$key     = trim(array_shift($explode));
					$value   = trim(implode(': ', $explode));
					$this->checkKeysInValue($value);
				}
				// Set the type of the value.  Int, string, etc
				$value = $this->_toType($value);
				if ($key === '0') $key = '__!YAMLZero';
				$array[$key] = $value;
			} else {
				$array = array ($line);
			}
			return $array;

		}


		private function returnArrayElement ($line) {
			if (strlen($line) <= 1) return array(array()); // Weird %)
			$array = array();
			$value   = trim(substr($line,1));
			$value   = $this->_toType($value);
			if ($this->isArrayElement($value)) {
				$value = $this->returnArrayElement($value);
			}
			$array[] = $value;
			return $array;
		}


		private function nodeContainsGroup ($line) {
			$symbolsForReference = 'A-z0-9_\-';
			if (strpos($line, '&') === false && strpos($line, '*') === false) return false; // Please die fast ;-)
			if ($line[0] == '&' && preg_match('/^(&['.$symbolsForReference.']+)/', $line, $matches)) return $matches[1];
			if ($line[0] == '*' && preg_match('/^(\*['.$symbolsForReference.']+)/', $line, $matches)) return $matches[1];
			if (preg_match('/(&['.$symbolsForReference.']+)$/', $line, $matches)) return $matches[1];
			if (preg_match('/(\*['.$symbolsForReference.']+$)/', $line, $matches)) return $matches[1];
			if (preg_match ('#^\s*<<\s*:\s*(\*[^\s]+).*$#', $line, $matches)) return $matches[1];
			return false;

		}

		private function addGroup ($line, $group) {
			if ($group[0] == '&') $this->_containsGroupAnchor = substr ($group, 1);
			if ($group[0] == '*') $this->_containsGroupAlias = substr ($group, 1);
			//print_r ($this->path);
		}

		private function stripGroup ($line, $group) {
			$line = trim(str_replace($group, '', $line));
			return $line;
		}
	}
}

// Enable use of Spyc from command line
// The syntax is the following: php Spyc.php spyc.yaml

do {
	if (PHP_SAPI != 'cli') break;
	if (empty ($_SERVER['argc']) || $_SERVER['argc'] < 2) break;
	if (empty ($_SERVER['PHP_SELF']) || FALSE === strpos ($_SERVER['PHP_SELF'], 'Spyc.php') ) break;
	$file = $argv[1];
	echo json_encode (spyc_load_file ($file));
} while (0);

}




// src/Maki/File/Markdown.php



namespace Maki\File {

class Markdown
{
    protected $app;
    protected $filePath;
    protected $directoryPath;
    protected $fileAbsPath;
    protected $name;
    protected $exists = false;
    protected $content;
    protected $loaded = false;
    protected $locked = false;
    protected $breadcrumb = null;

    public function __construct($app, $filePath)
    {
        $this->app = $app;
        $this->filePath = $filePath;
        $this->fileAbsPath = $app['docs.path'].$filePath;
        $this->name = pathinfo($filePath, PATHINFO_BASENAME);

        if (is_file($this->fileAbsPath)) {
            $this->exists = true;
        }

        $cacheDir = $this->app->getCacheDirAbsPath().'docs/';

        if (is_file($cacheDir.$this->name)) {            
            $time = time() - filemtime($cacheDir.$this->name);

            // Last edited more then 2 minutes ago
            if ($time > 120) {
                unlink($cacheDir.$this->name);
            } else {
                // See who editing
                $id = file_get_contents($cacheDir.$this->name);

                // Someone else is editing this file now
                if ($this->app->getSessionId() != $id) {
                    $this->locked = true;
                }
            }
        }
    }

    public function getName()
    {
        return $this->name;
    }

    public function getContent($forceRefresh = false)
    {
        if (($this->exists and ! $this->loaded) or $forceRefresh) {
            $this->content = file_get_contents($this->fileAbsPath);
            $this->loaded = true;
            return $this->content;
        }

        return $this->content;
    }

    public function setContent($content)
    {
        $this->content = $content;

        return $this;
    }

    public function getFilePath()
    {
        return $this->filePath;
    }

    public function getBreadcrumb()
    {
        if ($this->breadcrumb === null) {
            $content = $this->getContent();

            preg_match('/<\!\-\-\-\s*@breadcrumb:(.*)?\-\->/', $content, $match);

            if ( ! isset($match[1])) {
                $this->breadcrumb = array(array(
                    'text'   => $this->getName(),
                    'url'    => $this->getUrl(),
                    'active' => true
                ));
            } else {
                $pages = array();
                $parts = explode(';', trim($match[1]));

                foreach ($parts as $part) {
                    $page = explode('/', $part);
                    end($page);

                    $pages[] = array(
                        'text'      => current($page),
                        'url'       => strpos($part, '.md') === false ? false : $this->app->getUrl().$part,
                        'active'    => false
                    );
                }

                $pages[count($pages)-1]['active'] = true;

                $this->breadcrumb = $pages;
            }
        }

        return $this->breadcrumb;
    }

    public function save()
    {
        if ($this->locked) {
            return false;
        }

        $dirName = pathinfo($this->fileAbsPath, PATHINFO_DIRNAME);

        if ( ! is_dir($dirName)) {
            mkdir($dirName, 0777, true);
        }

        file_put_contents($this->fileAbsPath, $this->content);

        $cacheDir = $this->app->getCacheDirAbsPath().'docs/';

        if ( ! is_dir($cacheDir)) {
            mkdir($cacheDir, 0700, true);
        }

        file_put_contents($cacheDir.$this->name, $this->app->getSessionId());

        return $this;
    }

    public function delete()
    {
        if ($this->locked) {
            return false;
        }

        if ($this->exists) {
            @unlink($this->fileAbsPath);

            $this->exists = false;
            $this->loaded = false;
        }

        return $this;
    }

    public function toHTML()
    {
        return $this->app['parser.markdown']->transform($this->getContent());
    }

    public function getUrl()
    {
        return $this->app->getUrl().$this->filePath;
    }

    public function isNotLocked()
    {
        return $this->locked === false;
    }

    public function isLocked()
    {
        return $this->locked;
    }
}

}




// src/Maki/ThemeManager.php



namespace Maki {

class ThemeManager 
{
    protected $app;
    protected $stylesheets = array();
    protected $activeStylesheet;

    public function __construct(Maki $app)
    {
        $this->app = $app;
    }

    public function getStylesheet($name)
    {
        if ( ! $this->validName($name)) {
            throw new \InvalidArgumentException(sprintf('Stylesheet "%s" has not allowed chars or its name is too long or stylesheet with this name does not exists.', $name));
        }

        if ( ! isset($this->stylesheets[$name])) {
            throw new \InvalidArgumentException(sprintf('Stylesheet "%s" not exist.', $name));
        }

        return file_get_contents($this->app['docroot'].$this->stylesheets[$name]);
    }

    public function addStylesheet($name, $file)
    {
        $this->stylesheets[$name] = $file;

        return $this;
    }

    public function addStylesheets(array $array)
    {
        foreach ($array as $name => $file) {
            $this->addStylesheet($name, $file);
        }

        return $this;
    }

    public function getStylesheets()
    {
        return $this->stylesheets;
    }

    public function getActiveStylesheet()
    {
        return $this->activeStylesheet;
    }

    public function getStylesheetPath($name)
    {
        if ( ! $this->isStylesheetExist($name)) {
            throw new \InvalidArgumentException(sprintf('Stylesheet "%s" not exists.', $name));
        }

        return $this->stylesheets[$name];
    }

    public function setActiveStylesheet($name)
    {
        $this->activeStylesheet = $name;
    }

    public function isStylesheetExist($name)
    {
        return isset($this->stylesheets[$name]);
    }

    public function validName($name)
    {
        if (strlen($name) > 20) {
            return false;
        }

        if ( ! preg_match('/^[_a-z]+$/', $name)) {
            return false;
        }

        return true;
    }

    public function serveResource($name)
    {
        if ( ! preg_match('/^[-a-z0-9_\.\/]+$/', $name) or ! ($resource = $this->app->getResource($name))) {
            $this->app->response('File not found.', 'text/html', 404);
        }

        $ext = pathinfo($name, PATHINFO_EXTENSION);

        switch ($ext) {
            case 'js':
                $type = 'text/javascript';
                break;
            case 'css':
                $type = 'text/css';
                break;
            default:
                $type = 'text/html';
                break;
        }

        $this->app->response($resource, $type);
    }
}

}




// src/Maki/Collection.php



namespace Maki {

class Collection implements \ArrayAccess {
    protected $data = [];

    public function __construct(array $arr = [])
    {
        $this->data = $arr;
    }

    public function get($key, $default = null)
    {
        return $this->offsetExists($key) ? $this->offsetGet($key) : $default;
    }

    public function has($key)
    {
        return $this->offsetExists($key);
    }

    public function offsetSet($offset, $value)
    {
        $this->data[$offset] = $value;
    }

    public function offsetExists($offset)
    {
        return isset($this->data[$offset]);
    }

    public function offsetUnset($offset)
    {
        unset($this->data[$offset]);
    }

    public function offsetGet($offset)
    {
        return isset($this->data[$offset]) ? $this->data[$offset] : null;
    }

    public function merge(array $array = [])
    {
        $this->data = array_merge($this->data, $array);
    }

    public function pull($key, $default = null)
    {
        $value = $this->get($key, $default);
        $this->offsetUnset($key);

        return $value;
    }

    public function toArray()
    {
        return $this->data;
    }
}



}




// src/Maki/Controller.php



namespace Maki {

abstract class Controller
{
    /**
     * @var Maki
     */
    protected $app;

    public function __construct(Maki $app)
    {
        $this->app = $app;
    }

    public static function match(Maki $app)
    {

    }

    public function isSecured($action)
    {
        return true;
    }

    public function viewResponse($path, array $data = [], $type = 'text/html', $code = 200, $headers = [])
    {
        return $this->app->response($this->app->render($path, $data), $type, $code, $headers);
    }

    public function jsonResponse(array $array, $type = 'application/json', $code = 200, $headers = [])
    {
        return $this->app->response(json_encode($array), $type, $code, $headers);
    }
}

}




// src/Maki/Controller/PageController.php



namespace Maki\Controller {

use Maki\Controller;
use Maki\Maki;

/**
 * Page controller.
 * @package Maki\Controller
 */
class PageController extends Controller
{
    public static function match(Maki $app)
    {
        if ($app['editable'] and isset($_GET['save'])) {
            return 'saveContentAction';
        }

        if ($app['editable'] and isset($_GET['delete'])) {
            return 'deleteAction';
        }

        if (isset($_GET['action']) and $_GET['action'] == 'downloadCode') {
            return 'downloadCodeAction';
        }

        if (isset($_GET['ctrl']) and $_GET['ctrl'] == 'page' and isset($_GET['action'])) {
            switch ($_GET['action']) {
                case 'get':
                    return 'getAction';
                case 'archive':
                    return 'archiveAction';
            }
        }

        // Default action.
        return 'pageAction';
    }

    public function archiveAction()
    {
        $path = $this->app->createArchiveFile();
        $name = $_SERVER['HTTP_HOST'].'-'.date('Y-m-d');
        if (is_string($path)) {
            header('Content-Type: application/octet-stream');
            header("Content-Transfer-Encoding: Binary");
            header("Content-disposition: attachment; filename=\"{$name}.zip\"");
            readfile($path);
            exit;
        }
    }

    public function getAction()
    {
        if (!isset($_GET['page'])) {
            $this->app->responseFileNotFound();
        }

        $page = $this->createFileInstance($_GET['page']);
        return $this->jsonResponse(['content' => $page->toHTML()]);
    }

    /**
     * @param $file
     * @return \Maki\File\Markdown
     */
    protected function createFileInstance($file)
    {
        $app = $this->app;
        $ext = pathinfo($file, PATHINFO_EXTENSION);

        if ( ! isset($app['docs.extensions'][$ext])) {
            throw new \InvalidArgumentException(sprintf('File class for "%s" not exists.', $file));
        }

        $class = '\\Maki\\File\\'.ucfirst($app['docs.extensions'][$ext]);
        return new $class($app, $file);
    }

    public function findSidebarFile($directory)
    {
        $app = $this->app;
        $exts = $app['docs.extensions'];
        $path = $app['docroot'].$app['docs.path'].($directory == '' ? '' : rtrim($directory, '/').'/');
        $sidebarName = $app['docs.navigation_filename'];

        foreach ($exts as $ext => $null) {
            if (is_file($path.$sidebarName.'.'.$ext)) {
                return $sidebarName.'.'.$ext;
            }
        }

        return $sidebarName.'.'.key($exts);
    }

    public function findIndexFile($directory)
    {
        $app = $this->app;

        $exts = $app['docs.extensions'];
        $path = $app['docs.path'].rtrim($directory, '/').'/';
        $indexName = $app['docs.index_filename'];

        foreach ($app['docs.extensions'] as $ext) {
            if (is_file($path.$indexName.'.'.$ext)) {
                return $indexName.'.'.$ext;
            }
        }

        return $indexName.'.'.key($exts);
    }

    protected function createPageFileInstanceFromRequest()
    {
        $url = $this->app->getCurrentUrl();
        $info = pathinfo($url);

        // No file specified, so default index is taken
        if ( ! isset($info['extension'])) {
            $url .= $this->findIndexFile($url);
        }

        return $this->createFileInstance($url);
    }

    public function pageAction()
    {
        $app = $this->app;
        $info = pathinfo($app->getCurrentUrl());
        $dirName = isset($info['dirname']) ? $info['dirname'] : '';

        $nav = $this->createFileInstance($this->findSidebarFile($dirName));
        $page = $this->createPageFileInstanceFromRequest();

        $activeStylesheet = $app->getThemeManager()->getActiveStylesheet();

        $this->viewResponse('resources/views/page.php', [
            'page' => $page,
            'nav' => $nav,
            'editable' => $app['editable'],
            'viewable' => false,
            'editing' => ($app['editable'] and isset($_GET['edit'])),
            'activeStylesheet' => $activeStylesheet,
            'stylesheet' => $app->getThemeManager()->getStylesheetPath($activeStylesheet),
            'editButton' => 'edit'
        ]);
    }

    /**
     * Saves page content.
     */
    public function saveContentAction()
    {
        $page = $this->createPageFileInstanceFromRequest();
        $page->setContent(isset($_POST['content']) ? $_POST['content'] : '')->save();
        $this->jsonResponse(['success' => true]);
    }

    /**
     * Deletes page.
     */
    public function deleteAction()
    {
        $page = $this->createPageFileInstanceFromRequest();
        $page->delete();
        $this->app->redirect($this->app->getUrl());
    }

    public function downloadCodeAction()
    {
        $page = $this->createPageFileInstanceFromRequest();
        $index = (int) $_GET['index'];
        $lines = explode("\n", $page->getContent());
        $fileName = pathinfo($page->getName(), PATHINFO_FILENAME);

        $counter = 0;
        $opened = false;
        $codeType = '';
        $code = [];

        foreach ($lines as $line) {
            $spacelessLine = preg_replace('/[\t\s]+/', '', $line);

            if (strpos($spacelessLine, '```') === 0) {
                if ($opened) {
                    $opened = false;

                    // This is what we are looking for
                    if ($index == $counter) {
                        $this->app->response(implode("\n", $code), 'application/octet-stream', 200, [
                            'Content-Type: application/octet-stream',
                            'Content-Transfer-Encoding: Binary',
                            'Content-disposition: attachment; filename="'.$fileName.'.'.$codeType.'"'
                        ]);
                    }

                    $counter++;
                } else {
                    $opened = true;
                    $code = [];
                    $codeType = substr($line, 3);
                    continue;
                }
            }

            if ($opened) {
                $code[] = $line;
            }
        }
    }
}

}




// src/Maki/Controller/ServeResourceController.php



namespace Maki\Controller {

use Maki\Controller;
use Maki\Maki;

/**
 * Serves media resources (css, js).
 *
 * Class ResourceController
 * @package Maki\Controller
 */
class ServeResourceController extends Controller
{
    public static function match(Maki $app)
    {
        if (isset($_GET['resource'])) {
            return 'serve';
        }
    }

    public function isSecured($action)
    {
        return false;
    }

    public function serve()
    {
        $this->app->getThemeManager()->serveResource($_GET['resource']);
    }
}

}




// src/Maki/Controller/ThemeManagerController.php



namespace Maki\Controller {

use Maki\Controller;
use Maki\Maki;

/**
 * Theme manager.
 *
 * @package Maki\Controller
 */
class ThemeManagerController extends Controller
{
    public static function match(Maki $app)
    {
        if (isset($_GET['change_css'])) {
            return 'changeThemeAction';
        }
    }

    public function changeThemeAction()
    {
        // @todo sanitize (check if this stylesheet exist)
        setcookie('theme_css', $_GET['change_css'], time()+(60 * 60 * 24 * 30 * 12), '/');
        $this->app->redirect($this->app->getUrl().$this->app->getCurrentUrl());
    }
}

}




// src/Maki/Controller/UserController.php



namespace Maki\Controller {

use Maki\Controller;
use Maki\Maki;

class UserController extends Controller
{
    public function isSecured($action)
    {
        if (in_array($action, ['loginPageAction', 'authAction'])) {
            return false;
        }

        return true;
    }

    public static function match(Maki $app)
    {
        // Log out action
        if (isset($_GET['logout'])) {
            return 'logoutAction';
        }

        // Authorization request
        if ($_SERVER['REQUEST_METHOD'] == 'POST' and isset($_GET['auth'])) {
            return 'authAction';
        }
    }

    /**
     * This action is dispatched manually, there is no url "login" or something like this.
     */
    public function loginPageAction()
    {
        $this->viewResponse('resources/views/login.php');
    }

    public function logoutAction()
    {
        $this->app->deauthenticate();
        $this->app->redirect($this->app->getUrl());
    }

    public function authAction()
    {
        $username = isset($_POST['username']) ? $_POST['username'] : '';
        $pass = isset($_POST['password']) ? $_POST['password'] : '';
        $remember = isset($_POST['remember']) ? $_POST['remember'] : '0';

        $users = $this->app['users'];

        foreach ($users as $user) {
            if ($user['username'] == $username and $user['password'] == $pass) {
                $this->app->authenticate($username, $remember == '1');
                $this->app->response();
            }
        }

        $this->jsonResponse([
            'error' => 'Invalid username or password.'
        ], 'application/json', 400);
    }
}

}




// src/Maki/Maki.php



namespace Maki {

/**
 * Class Maki
 * @package Maki
 * @todo add "copy" for code snippets
 * @todo search
 * @todo page renaming
 * @todo who made change on page
 * @todo expandable sections
 * @todo if page has "." (dot) in name there occurs error "No input file specified"
 * @todo nav on mobile
 * @todo make nicer error page for "maki.dev/something.php" url.
 * @todo files in zip archive should not be in full path (/var/www/bla/bla).
 * @todo light.css links color (orange does not really fit to blue-dark)
 * @todo who is editing it now
 * @todo protected pages
 * @todo multi directory source selector.
 * @todo add gutter at 80 column. (simplemde by default does not support it).
 * @todo "saving" button should have some loading indicator when saving is in progress (now you can't tell if saving process is finished or it is still in progress).
 * @todo blockquote shouldn't be red (or it shoule detect first word, if it is "Important" than background is red, if "Note" that blue, if "Warning" then yellow.
 * @todo if saving return error 500 it stop saving (don't know what markdown shit return 500 when saving).
 * @todo Allow renaming directories (whole paths). For example move all from cmscore/ to symfony-v1/cmscore; this should not only move files but also update all pathes in all files.
 * @todo allow collapse sections and remember it.
 * @todo remove text-decoration: underline from event-toc
 * @todo add alias "events-toc" to "event-toc" (missing "s").
 * @todo add "preventable" and "delayable/deferrable" labels to events.
 * @todo remove "underline" from "toc" in events view.
 * @todo "toc" in events view should have headers like in content.
 */
class Maki extends \Pimple
{
    protected $url;

    protected $sessionId;
    /**
     * @var ThemeManager
     */
    protected $themeManager;

    /**
     * @var Collection Configuration object.
     */
    protected $config;

    /**
     * Base container values.
     * @var array
     */
    protected $values = [
        'main_title'    => null
    ];

    protected $controllers = [
        'Maki\Controller\ServeResourceController' => 9999,
        'Maki\Controller\UserController' => 1000,
        'Maki\Controller\ThemeManagerController' => 1000,
        'Maki\Controller\PageController' => 0
    ];

    /**
     * Config:
     *
     * - docroot - Document root path (must ends with trailing slash)
     *
     * @param array $config
     * @throws \InvalidArgumentException
     */
    public function __construct(array $config = array())
    {
        session_start();
        $this->sessionId = session_id();

        $this->config = $config = new Collection($config);

        // Document root path must be defined
        if ( ! $config->has('docroot')) {
            throw new \InvalidArgumentException('`docroot` is not defined.');
        }

        $this['docroot'] = $config->pull('docroot');

        // Base url
        $this['url.base'] = $config->pull('url.base') ?: pathinfo($_SERVER['SCRIPT_NAME'], PATHINFO_DIRNAME);
        $this['url.base'] = str_replace('//', '/', '/'.trim($this['url.base'], '/').'/');

        // Create htaccess as soon as possible (if needed)
        $this->createHtAccess();
        $this->initThemeManager($config);

        // Documentation files extensions
        $this['docs.extensions'] = $config->pull('docs.extensions') ?: [
            'md'        => 'markdown',
            'markdown'  => 'markdown'
        ];

        $this['cookie.auth_name'] = $config->pull('cookie.auth_name', 'maki');
        $this['cookie.auth_expire'] = $config->pull('cookie.auth_expire', 3600 * 24 * 30); // 30 days
        $this['users'] = $config->pull('users', []);
        $this['salt'] = $config->pull('salt', '');

        $this->values = array_merge($this->values, $config->toArray());

        $this['user'] = null;

        // Define default markdown parser
        if ( ! $this->offsetExists('parser.markdown')) {
            $this['parser.markdown'] = $this->share(function($c) {
                $markdown = new Markdown();
                $markdown->baseUrl = $c['url.base'];

                return $markdown;
            });
        }

        //
        if ( ! $this->offsetExists('docs.path')) {
            $this['docs.path'] = '';
        }

        // Markdown files directory
        $this['docs.path'] = $this['docs.path'] == '' ? '' : rtrim($this['docs.path'], '/').'/';

        // Index file in directory
        if ( ! $this->offsetExists('docs.index_filename')) {
            $this['docs.index_filename'] = 'index';
        }

        // Sidebar filename
        if ( ! $this->offsetExists('docs.navigation_filename')) {
            $this['docs.navigation_filename'] = '_nav';
        }

        if ( ! $this->offsetExists('editable')) {
            $this['editable'] = true;
        }

        // Whats for is "viewable"?
        if ( ! $this->offsetExists('viewable')) {
            $this['viewable'] = true;
        }

        if ( ! $this->offsetExists('cache_dir')) {
            $this['cache_dir'] = '_maki_cache';
        }

        // Normalize path
        $this['cache_dir'] = rtrim($this['cache_dir'], '/').'/';

        // Create cache dir
        if ( ! is_dir($this->getCacheDirAbsPath())) {
            mkdir($this->getCacheDirAbsPath(), 0700, true);
        }

        $this->handleBackup();
        $this->handleRequest();
    }

    public function handleBackup()
    {
        if (!isset($this->values['backup'])) {
            return;
        }

        $path = $this['cache_dir'].'last_backup';
        // Make backup if in 24 hours it was not maded.
        if (!is_file($path) or filemtime($path) > 86400) { // 24 hours
            $this->makeBackup();
        }
    }

    public function makeBackup()
    {
        //$this->createArchiveFile();
    }

    public function createArchiveFile()
    {
        $files = $this->getFilesList();

        if ($files) {
            // Create the archive.
            $zip = new \ZipArchive();
            $path = __DIR__.'/'.$this['cache_dir'].'archive.zip';
            if (($error = $zip->open($path, \ZIPARCHIVE::CREATE | \ZIPARCHIVE::OVERWRITE)) !== true) {
                return false;
            }

            // Add the files.
            foreach ($files as $key => $file) {
                $zip->addFile($file);
            }

            // Close the zip -- done!
            $zip->close();

            if (is_file($this['cache_dir'].'archive.zip')) {
                return $this['cache_dir'].'archive.zip';
            }
        }

        return false;
    }

    public function getFilesList($directory = null)
    {
        if ($directory === null) {
            $directory = __DIR__.'/'.$this['docs.path'];
        }

        $files = [];
        foreach (scandir($directory) as $file) {
            if ($file == '.' or $file == '..' or $file == '_maki_cache') {
                continue;
            }

            if (is_file($directory.$file)) {
                $ext = pathinfo($file, PATHINFO_EXTENSION);
                if ($ext != 'md') {
                    continue;
                }
                $files[] = $directory . $file;
            } else if (is_dir($directory.$file)) {
                $files = array_merge($files, $this->getFilesList($directory.$file.'/'));
            }
        }

        return $files;
    }

    /**
     * @return ThemeManager
     */
    public function getThemeManager()
    {
        return $this->themeManager;
    }

    public function getResource($path)
    {
        $func = 'resource_'.md5($path);

        if (function_exists($func)) {
            return $func();
        }

        $realpath = realpath($this['docroot'].$path);

        if ($realpath == false or strpos($realpath, $this['docroot']) !== 0) {
            return false;
        }

        $ext = pathinfo($realpath, PATHINFO_EXTENSION);

        if ( ! in_array($ext, ['css', 'js'])) {
            return false;
        }

        if (is_file($realpath)) {
            return file_get_contents($realpath);
        }

        return false;
    }

    public function response($body = '', $type = 'text/html', $code = 200, $headers = [])
    {
        switch ($code) {
            case 200: header('HTTP/1.1 200 OK'); break;
            case 400: header('HTTP/1.1 400 Bad Request'); break;
            case 404: header('HTTP/1.1 404 Not Found'); break;
        }

        header('Content-Type: '.$type);

        foreach ($headers as $header) {
            header($header);
        }

        echo $body;

        exit(0);
    }

    public function responseFileNotFound($text = 'File not found')
    {
        $this->response($text, 'text/plain', 404);
    }

    public function getCurrentUrl()
    {
        if ($this->url === null) {
            $uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
            $script = trim($this['url.base'], '/');
            $this->url = trim(str_replace($script, '', trim($uri, '/')), '/');
        }

        return $this->url;
    }

    /**
     * Return url.
     * @return string
     */
    public function getUrl()
    {
        static $url;

        if (!$url) {
            $ssl = (!empty($_SERVER['HTTPS']) and $_SERVER['HTTPS'] == 'on');
            $protocol = 'http' . ($ssl ? 's' : '');
            $port = $_SERVER['SERVER_PORT'];
            $port = ((!$ssl && $port == '80') || ($ssl && $port == '443')) ? '' : ':' . $port;
            $host = $_SERVER['HTTP_HOST'];

            $url = $protocol . '://' . $host . $port . $this['url.base'];
        }

        return $url;
    }

    public function getCacheDirAbsPath()
    {
        return $this['docroot'].$this['cache_dir'];
    }

    public function getSessionId()
    {
        return $this->sessionId;
    }

    public function redirect($url, $permanent = false)
    {
        if ($permanent) {
            header('HTTP/1.1 301 Moved Permanently');
        } else {
            header('HTTP/1.1 302 Moved Temporarily');
        }

        header('Location: '.$url);
        exit(0);
    }

    /**
     * Return url to specified resource.
     *
     *     $app->getResourceUrl('resources/jquery.js');
     *     // Return "http://domain.com?resource=resources/jquery.js
     *
     * @param $resource
     * @return string
     */
    public function getResourceUrl($resource)
    {
        return $this->getUrl().'?resource='.$resource;
    }

    /**
     * Render view.
     *
     * @param $path Path to view (relative from document root).
     * @param array $data Data passed to view.
     * @return string
     */
    public function render($path, array $data = [])
    {
        $data['app'] = $this;
        $func = 'view_'.md5($path);

        if (function_exists($func)) {
            $content = $func($data);
        } else {
            extract($data);
            $path = $this['docroot'] . $path;

            if (!is_file($path)) {
                throw new \InvalidArgumentException(sprintf('View "%s" does not exists.', $path));
            }

            ob_start();
            include $path;
            $content = ob_get_contents();
            ob_end_clean();
        }

        return $content;
    }

    /**
     * Checks if user is authenticated.
     *
     * @return bool
     */
    public function isUserAuthenticated()
    {
        return isset($_SESSION['auth']);
    }

    /**
     * Return user data for specified username.
     *
     * @param $username User name.
     * @return array User data.
     * @return \InvalidArgumentException If user with specified username does not exists.
     */
    public function getUser($username)
    {
        foreach ($this['users'] as $user) {
            if ($user['username'] === $username) {
                return $user;
            }
        }

        return new \InvalidArgumentException(sprintf('User "%s" does not exists.', $username));
    }

    /**
     * Authenticate user.
     *
     * @param $username User name.
     * @param bool|false $remember Remember user.
     */
    public function authenticate($username, $remember = false)
    {
        $_SESSION['auth'] = $username;

        if ($remember) {
            $token = sha1($username.$this['salt']);
            setcookie($this['cookie.auth_name'], $token, time() + $this['cookie.auth_expire'], '/');

            $path = $this['cache_dir'].'users/';
            if (!is_dir($path)) {
                mkdir($path, 0777, true);
            }

            file_put_contents($path.$token, $username);

            // Garbage collector
            foreach (scandir($path) as $fileName) {
                if ($fileName == '.' or $fileName == '..') {
                    continue;
                }

                if (filemtime($path.$fileName) < time() - $this['cookie.auth_expire']) {
                    @unlink($path.$fileName);
                }
            }
        }
    }

    /**
     * Deauthenticate user, destroys session, removes "remember me" cookies.
     */
    public function deauthenticate()
    {
        session_destroy();
        unset($_COOKIE[$this['cookie.auth_name']]);
        setcookie($this['cookie.auth_name'], null, -1, '/');
    }

    protected function handleRequest()
    {
        foreach ($this->controllers as $class => $priority) {
            $action = forward_static_call([$class, 'match'], $this);
            if (is_string($action)) {
                $this->dispatchController($class, $action);
            }
        }
    }

    protected function dispatchController($class, $action)
    {
        $controller = new $class($this);

        if ($controller->isSecured($action)) {
            $this->checkAuthentication();
        }

        if (!method_exists($controller, $action)) {
            throw new \InvalidArgumentException(sprintf('Method "%s" does not exists in "%s" controller.', $action, $class));
        }

        call_user_func([$controller, $action]);
    }

    /**
     * Creates and inits theme manager.
     *
     * - defines default theme
     * - adds themes specified in config
     * - resolve active theme
     *
     * @param Collection $config
     */
    protected function initThemeManager(Collection $config)
    {
        $tm = new ThemeManager($this);

        // Set default theme
        $tm->addStylesheet('light', 'resources/light.css');

        // Add styles defined in config
        if ($config->has('theme.stylesheets')) {
            $tm->addStylesheets($config->pull('theme.stylesheets'));
        }

        // Set active theme
        if (isset($_COOKIE['theme_css']) and $tm->isStylesheetExist($_COOKIE['theme_css'])) {
            $tm->setActiveStylesheet($_COOKIE['theme_css']);
        } else if ($config->has('theme.active')) {
            $tm->setActiveStylesheet($config->pull('theme.active'));
        } else {
            $tm->setActiveStylesheet('light');
        }

        $this->themeManager = $tm;
    }

    /**
     * Creates .htaccess file inside root directory.
     */
    protected function createHtAccess()
    {
        // Create htaccess if not exists yet
        if ( ! is_file($this['docroot'].'.htaccess')) {
            file_put_contents($this['docroot'].'.htaccess', '<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews
    </IfModule>

    RewriteEngine On
    RewriteBase '.$this['url.base'].'

    # Redirect Trailing Slashes...
    RewriteRule ^(.*)/$ /$1 [L,R=301]

    # Handle Front Controller...
    # RewriteCond %{REQUEST_FILENAME} !-d
    # RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>');

            $this->redirect($this->getUrl(), false);
        }

    }

    /**
     * Check if user is authenticated
     */
    protected function checkAuthentication()
    {
        // If no users defined wiki is public
        if (!$this['users']) {
            return;
        }

        // User authorized
        if ($this->isUserAuthenticated()) {
            try {
                $this['user'] = $this->getUser($_SESSION['auth']);
                return;
            } catch (\InvalidArgumentException $e) {
                // If user not found on the list it means he/she was logged
                // but in the meantime someone modified maki's config file.
                // We logout this user now.
                $this->deauthenticate();
            }
        }

        $cookieName = $this['cookie.auth_name'];

        // Check if user was remembered
        if (isset($_COOKIE[$cookieName])) {
            $token = $_COOKIE[$cookieName];

            if (strlen($token) == 40 and preg_match('/^[0-9a-z]+$/', $token)) {
                $path = $this['cache_dir'].'users/'.$token;

                if (is_file($path)) {
                    $username = file_get_contents($path);

                    try {
                        // We call this method only to make sure
                        // username from cookie exists in our database.
                        $this->getUser($username);
                        $this->authenticate($username, true);
                        return;
                    } catch (\InvalidArgumentException $e) {
                        // If getUser throw exception login view will be displayed
                    }
                }
            }
        }

        // Display username form
        $this->dispatchController('Maki\Controller\UserController', 'loginPageAction');
    }

}

}




// index.php



namespace {

    

    error_reporting(E_ALL);
    ini_set('display_errors', 'On');

    $config = [];
    $dir = __DIR__.DIRECTORY_SEPARATOR;

    // Load configuration file
    if (is_file($dir.'maki.json')) {
        $config = (array) json_decode(file_get_contents($dir.'maki.json'), true);
    }

    $config['docroot'] = $dir;

    new \Maki\Maki($config);

}


namespace {

function resource_a6068e4e9a1a6a3713356cd042f7c9fa() {
    return base64_decode('');
}


function resource_2e26e3325885ef587bc1b25394826717() {
    return base64_decode('Ly8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnMNCi8vIERpc3RyaWJ1dGVkIHVuZGVyIGFuIE1JVCBsaWNlbnNlOiBodHRwOi8vY29kZW1pcnJvci5uZXQvTElDRU5TRQ0KDQooZnVuY3Rpb24obW9kKSB7DQogICAgaWYgKHR5cGVvZiBleHBvcnRzID09ICJvYmplY3QiICYmIHR5cGVvZiBtb2R1bGUgPT0gIm9iamVjdCIpIC8vIENvbW1vbkpTDQogICAgICAgIG1vZChyZXF1aXJlKCIuLi8uLi9saWIvY29kZW1pcnJvciIpKTsNCiAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgLy8gQU1EDQogICAgICAgIGRlZmluZShbIi4uLy4uL2xpYi9jb2RlbWlycm9yIl0sIG1vZCk7DQogICAgZWxzZSAvLyBQbGFpbiBicm93c2VyIGVudg0KICAgICAgICBtb2QoQ29kZU1pcnJvcik7DQp9KShmdW5jdGlvbihDb2RlTWlycm9yKSB7DQogICAgInVzZSBzdHJpY3QiOw0KDQogICAgQ29kZU1pcnJvci5kZWZpbmVPcHRpb24oInJ1bGVycyIsIGZhbHNlLCBmdW5jdGlvbihjbSwgdmFsKSB7DQogICAgICAgIGlmIChjbS5zdGF0ZS5ydWxlckRpdikgew0KICAgICAgICAgICAgY20uZGlzcGxheS5saW5lU3BhY2UucmVtb3ZlQ2hpbGQoY20uc3RhdGUucnVsZXJEaXYpDQogICAgICAgICAgICBjbS5zdGF0ZS5ydWxlckRpdiA9IG51bGwNCiAgICAgICAgICAgIGNtLm9mZigicmVmcmVzaCIsIGRyYXdSdWxlcnMpDQogICAgICAgIH0NCiAgICAgICAgaWYgKHZhbCAmJiB2YWwubGVuZ3RoKSB7DQogICAgICAgICAgICBjbS5zdGF0ZS5ydWxlckRpdiA9IGNtLmRpc3BsYXkubGluZVNwYWNlLmluc2VydEJlZm9yZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSwgY20uZGlzcGxheS5jdXJzb3JEaXYpDQogICAgICAgICAgICBjbS5zdGF0ZS5ydWxlckRpdi5jbGFzc05hbWUgPSAiQ29kZU1pcnJvci1ydWxlcnMiDQogICAgICAgICAgICBkcmF3UnVsZXJzKGNtKQ0KICAgICAgICAgICAgY20ub24oInJlZnJlc2giLCBkcmF3UnVsZXJzKQ0KICAgICAgICB9DQogICAgfSk7DQoNCiAgICBmdW5jdGlvbiBkcmF3UnVsZXJzKGNtKSB7DQogICAgICAgIGNtLnN0YXRlLnJ1bGVyRGl2LnRleHRDb250ZW50ID0gIiINCiAgICAgICAgdmFyIHZhbCA9IGNtLmdldE9wdGlvbigicnVsZXJzIik7DQogICAgICAgIHZhciBjdyA9IGNtLmRlZmF1bHRDaGFyV2lkdGgoKTsNCiAgICAgICAgdmFyIGxlZnQgPSBjbS5jaGFyQ29vcmRzKENvZGVNaXJyb3IuUG9zKGNtLmZpcnN0TGluZSgpLCAwKSwgImRpdiIpLmxlZnQ7DQogICAgICAgIGNtLnN0YXRlLnJ1bGVyRGl2LnN0eWxlLm1pbkhlaWdodCA9IChjbS5kaXNwbGF5LnNjcm9sbGVyLm9mZnNldEhlaWdodCArIDMwKSArICJweCI7DQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICB2YXIgZWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7DQogICAgICAgICAgICBlbHQuY2xhc3NOYW1lID0gIkNvZGVNaXJyb3ItcnVsZXIiOw0KICAgICAgICAgICAgdmFyIGNvbCwgY29uZiA9IHZhbFtpXTsNCiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uZiA9PSAibnVtYmVyIikgew0KICAgICAgICAgICAgICAgIGNvbCA9IGNvbmY7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGNvbCA9IGNvbmYuY29sdW1uOw0KICAgICAgICAgICAgICAgIGlmIChjb25mLmNsYXNzTmFtZSkgZWx0LmNsYXNzTmFtZSArPSAiICIgKyBjb25mLmNsYXNzTmFtZTsNCiAgICAgICAgICAgICAgICBpZiAoY29uZi5jb2xvcikgZWx0LnN0eWxlLmJvcmRlckNvbG9yID0gY29uZi5jb2xvcjsNCiAgICAgICAgICAgICAgICBpZiAoY29uZi5saW5lU3R5bGUpIGVsdC5zdHlsZS5ib3JkZXJMZWZ0U3R5bGUgPSBjb25mLmxpbmVTdHlsZTsNCiAgICAgICAgICAgICAgICBpZiAoY29uZi53aWR0aCkgZWx0LnN0eWxlLmJvcmRlckxlZnRXaWR0aCA9IGNvbmYud2lkdGg7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHQuc3R5bGUubGVmdCA9IChsZWZ0ICsgY29sICogY3cpICsgInB4IjsNCiAgICAgICAgICAgIGNtLnN0YXRlLnJ1bGVyRGl2LmFwcGVuZENoaWxkKGVsdCkNCiAgICAgICAgfQ0KICAgIH0NCn0pOw==');
}


function resource_d05215a841331ea964a203916f1f5e4f() {
    return base64_decode('');
}


function resource_83b0f20668b196810065bec85b4fa294() {
    return base64_decode('LyoqCiAqIHNpbXBsZW1kZSB2MS4xMS4yCiAqIENvcHlyaWdodCBOZXh0IFN0ZXAgV2VicywgSW5jLgogKiBAbGluayBodHRwczovL2dpdGh1Yi5jb20vTmV4dFN0ZXBXZWJzL3NpbXBsZW1kZS1tYXJrZG93bi1lZGl0b3IKICogQGxpY2Vuc2UgTUlUCiAqLwouQ29kZU1pcnJvcntjb2xvcjojMDAwfS5Db2RlTWlycm9yLWxpbmVze3BhZGRpbmc6NHB4IDB9LkNvZGVNaXJyb3IgcHJle3BhZGRpbmc6MCA0cHh9LkNvZGVNaXJyb3ItZ3V0dGVyLWZpbGxlciwuQ29kZU1pcnJvci1zY3JvbGxiYXItZmlsbGVye2JhY2tncm91bmQtY29sb3I6I2ZmZn0uQ29kZU1pcnJvci1ndXR0ZXJze2JvcmRlci1yaWdodDoxcHggc29saWQgI2RkZDtiYWNrZ3JvdW5kLWNvbG9yOiNmN2Y3Zjc7d2hpdGUtc3BhY2U6bm93cmFwfS5Db2RlTWlycm9yLWxpbmVudW1iZXJ7cGFkZGluZzowIDNweCAwIDVweDttaW4td2lkdGg6MjBweDt0ZXh0LWFsaWduOnJpZ2h0O2NvbG9yOiM5OTk7d2hpdGUtc3BhY2U6bm93cmFwfS5Db2RlTWlycm9yLWd1dHRlcm1hcmtlcntjb2xvcjojMDAwfS5Db2RlTWlycm9yLWd1dHRlcm1hcmtlci1zdWJ0bGV7Y29sb3I6Izk5OX0uQ29kZU1pcnJvci1jdXJzb3J7Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkICMwMDA7Ym9yZGVyLXJpZ2h0Om5vbmU7d2lkdGg6MH0uQ29kZU1pcnJvciBkaXYuQ29kZU1pcnJvci1zZWNvbmRhcnljdXJzb3J7Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkIHNpbHZlcn0uY20tZmF0LWN1cnNvciAuQ29kZU1pcnJvci1jdXJzb3J7d2lkdGg6YXV0bztib3JkZXI6MCFpbXBvcnRhbnQ7YmFja2dyb3VuZDojN2U3fS5jbS1mYXQtY3Vyc29yIGRpdi5Db2RlTWlycm9yLWN1cnNvcnN7ei1pbmRleDoxfS5jbS1hbmltYXRlLWZhdC1jdXJzb3J7d2lkdGg6YXV0bztib3JkZXI6MDstd2Via2l0LWFuaW1hdGlvbjpibGluayAxLjA2cyBzdGVwcygxKSBpbmZpbml0ZTstbW96LWFuaW1hdGlvbjpibGluayAxLjA2cyBzdGVwcygxKSBpbmZpbml0ZTthbmltYXRpb246YmxpbmsgMS4wNnMgc3RlcHMoMSkgaW5maW5pdGU7YmFja2dyb3VuZC1jb2xvcjojN2U3fUAtbW96LWtleWZyYW1lcyBibGlua3s1MCV7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH19QC13ZWJraXQta2V5ZnJhbWVzIGJsaW5rezUwJXtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fX1Aa2V5ZnJhbWVzIGJsaW5rezUwJXtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fX0uY20tdGFie2Rpc3BsYXk6aW5saW5lLWJsb2NrO3RleHQtZGVjb3JhdGlvbjppbmhlcml0fS5Db2RlTWlycm9yLXJ1bGVye2JvcmRlci1sZWZ0OjFweCBzb2xpZCAjY2NjO3Bvc2l0aW9uOmFic29sdXRlfS5jbS1zLWRlZmF1bHQgLmNtLWhlYWRlcntjb2xvcjojMDBmfS5jbS1zLWRlZmF1bHQgLmNtLXF1b3Rle2NvbG9yOiMwOTB9LmNtLW5lZ2F0aXZle2NvbG9yOiNkNDR9LmNtLXBvc2l0aXZle2NvbG9yOiMyOTJ9LmNtLWhlYWRlciwuY20tc3Ryb25ne2ZvbnQtd2VpZ2h0OjcwMH0uY20tZW17Zm9udC1zdHlsZTppdGFsaWN9LmNtLWxpbmt7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZX0uY20tc3RyaWtldGhyb3VnaHt0ZXh0LWRlY29yYXRpb246bGluZS10aHJvdWdofS5jbS1zLWRlZmF1bHQgLmNtLWtleXdvcmR7Y29sb3I6IzcwOH0uY20tcy1kZWZhdWx0IC5jbS1hdG9te2NvbG9yOiMyMTl9LmNtLXMtZGVmYXVsdCAuY20tbnVtYmVye2NvbG9yOiMxNjR9LmNtLXMtZGVmYXVsdCAuY20tZGVme2NvbG9yOiMwMGZ9LmNtLXMtZGVmYXVsdCAuY20tdmFyaWFibGUtMntjb2xvcjojMDVhfS5jbS1zLWRlZmF1bHQgLmNtLXZhcmlhYmxlLTN7Y29sb3I6IzA4NX0uY20tcy1kZWZhdWx0IC5jbS1jb21tZW50e2NvbG9yOiNhNTB9LmNtLXMtZGVmYXVsdCAuY20tc3RyaW5ne2NvbG9yOiNhMTF9LmNtLXMtZGVmYXVsdCAuY20tc3RyaW5nLTJ7Y29sb3I6I2Y1MH0uY20tcy1kZWZhdWx0IC5jbS1tZXRhLC5jbS1zLWRlZmF1bHQgLmNtLXF1YWxpZmllcntjb2xvcjojNTU1fS5jbS1zLWRlZmF1bHQgLmNtLWJ1aWx0aW57Y29sb3I6IzMwYX0uY20tcy1kZWZhdWx0IC5jbS1icmFja2V0e2NvbG9yOiM5OTd9LmNtLXMtZGVmYXVsdCAuY20tdGFne2NvbG9yOiMxNzB9LmNtLXMtZGVmYXVsdCAuY20tYXR0cmlidXRle2NvbG9yOiMwMGN9LmNtLXMtZGVmYXVsdCAuY20taHJ7Y29sb3I6Izk5OX0uY20tcy1kZWZhdWx0IC5jbS1saW5re2NvbG9yOiMwMGN9LmNtLWludmFsaWRjaGFyLC5jbS1zLWRlZmF1bHQgLmNtLWVycm9ye2NvbG9yOnJlZH0uQ29kZU1pcnJvci1jb21wb3Npbmd7Ym9yZGVyLWJvdHRvbToycHggc29saWR9ZGl2LkNvZGVNaXJyb3Igc3Bhbi5Db2RlTWlycm9yLW1hdGNoaW5nYnJhY2tldHtjb2xvcjojMGYwfWRpdi5Db2RlTWlycm9yIHNwYW4uQ29kZU1pcnJvci1ub25tYXRjaGluZ2JyYWNrZXR7Y29sb3I6I2YyMn0uQ29kZU1pcnJvci1tYXRjaGluZ3RhZ3tiYWNrZ3JvdW5kOnJnYmEoMjU1LDE1MCwwLC4zKX0uQ29kZU1pcnJvci1hY3RpdmVsaW5lLWJhY2tncm91bmR7YmFja2dyb3VuZDojZThmMmZmfS5Db2RlTWlycm9ye3Bvc2l0aW9uOnJlbGF0aXZlO292ZXJmbG93OmhpZGRlbjtiYWNrZ3JvdW5kOiNmZmZ9LkNvZGVNaXJyb3Itc2Nyb2xse292ZXJmbG93OnNjcm9sbCFpbXBvcnRhbnQ7bWFyZ2luLWJvdHRvbTotMzBweDttYXJnaW4tcmlnaHQ6LTMwcHg7cGFkZGluZy1ib3R0b206MzBweDtoZWlnaHQ6MTAwJTtvdXRsaW5lOjA7cG9zaXRpb246cmVsYXRpdmV9LkNvZGVNaXJyb3Itc2l6ZXJ7cG9zaXRpb246cmVsYXRpdmU7Ym9yZGVyLXJpZ2h0OjMwcHggc29saWQgdHJhbnNwYXJlbnR9LkNvZGVNaXJyb3ItZ3V0dGVyLWZpbGxlciwuQ29kZU1pcnJvci1oc2Nyb2xsYmFyLC5Db2RlTWlycm9yLXNjcm9sbGJhci1maWxsZXIsLkNvZGVNaXJyb3ItdnNjcm9sbGJhcntwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjY7ZGlzcGxheTpub25lfS5Db2RlTWlycm9yLXZzY3JvbGxiYXJ7cmlnaHQ6MDt0b3A6MDtvdmVyZmxvdy14OmhpZGRlbjtvdmVyZmxvdy15OnNjcm9sbH0uQ29kZU1pcnJvci1oc2Nyb2xsYmFye2JvdHRvbTowO2xlZnQ6MDtvdmVyZmxvdy15OmhpZGRlbjtvdmVyZmxvdy14OnNjcm9sbH0uQ29kZU1pcnJvci1zY3JvbGxiYXItZmlsbGVye3JpZ2h0OjA7Ym90dG9tOjB9LkNvZGVNaXJyb3ItZ3V0dGVyLWZpbGxlcntsZWZ0OjA7Ym90dG9tOjB9LkNvZGVNaXJyb3ItZ3V0dGVyc3twb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOjA7bWluLWhlaWdodDoxMDAlO3otaW5kZXg6M30uQ29kZU1pcnJvci1ndXR0ZXJ7d2hpdGUtc3BhY2U6bm9ybWFsO2hlaWdodDoxMDAlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOnRvcDttYXJnaW4tYm90dG9tOi0zMHB4fS5Db2RlTWlycm9yLWd1dHRlci13cmFwcGVye3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6NDtiYWNrZ3JvdW5kOjAgMCFpbXBvcnRhbnQ7Ym9yZGVyOm5vbmUhaW1wb3J0YW50Oy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX0uQ29kZU1pcnJvci1ndXR0ZXItYmFja2dyb3VuZHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDt6LWluZGV4OjR9LkNvZGVNaXJyb3ItZ3V0dGVyLWVsdHtwb3NpdGlvbjphYnNvbHV0ZTtjdXJzb3I6ZGVmYXVsdDt6LWluZGV4OjR9LkNvZGVNaXJyb3ItbGluZXN7Y3Vyc29yOnRleHQ7bWluLWhlaWdodDoxcHh9LkNvZGVNaXJyb3IgcHJley1tb3otYm9yZGVyLXJhZGl1czowOy13ZWJraXQtYm9yZGVyLXJhZGl1czowO2JvcmRlci1yYWRpdXM6MDtib3JkZXItd2lkdGg6MDtiYWNrZ3JvdW5kOjAgMDtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZTppbmhlcml0O21hcmdpbjowO3doaXRlLXNwYWNlOnByZTt3b3JkLXdyYXA6bm9ybWFsO2xpbmUtaGVpZ2h0OmluaGVyaXQ7Y29sb3I6aW5oZXJpdDt6LWluZGV4OjI7cG9zaXRpb246cmVsYXRpdmU7b3ZlcmZsb3c6dmlzaWJsZTstd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6dHJhbnNwYXJlbnQ7LXdlYmtpdC1mb250LXZhcmlhbnQtbGlnYXR1cmVzOm5vbmU7Zm9udC12YXJpYW50LWxpZ2F0dXJlczpub25lfS5Db2RlTWlycm9yLXdyYXAgcHJle3dvcmQtd3JhcDpicmVhay13b3JkO3doaXRlLXNwYWNlOnByZS13cmFwO3dvcmQtYnJlYWs6bm9ybWFsfS5Db2RlTWlycm9yLWxpbmViYWNrZ3JvdW5ke3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDtyaWdodDowO3RvcDowO2JvdHRvbTowO3otaW5kZXg6MH0uQ29kZU1pcnJvci1saW5ld2lkZ2V0e3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MjtvdmVyZmxvdzphdXRvfS5Db2RlTWlycm9yLWNvZGV7b3V0bGluZTowfS5Db2RlTWlycm9yLWd1dHRlciwuQ29kZU1pcnJvci1ndXR0ZXJzLC5Db2RlTWlycm9yLWxpbmVudW1iZXIsLkNvZGVNaXJyb3Itc2Nyb2xsLC5Db2RlTWlycm9yLXNpemVyey1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94fS5Db2RlTWlycm9yLW1lYXN1cmV7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtoZWlnaHQ6MDtvdmVyZmxvdzpoaWRkZW47dmlzaWJpbGl0eTpoaWRkZW59LkNvZGVNaXJyb3ItY3Vyc29ye3Bvc2l0aW9uOmFic29sdXRlfS5Db2RlTWlycm9yLW1lYXN1cmUgcHJle3Bvc2l0aW9uOnN0YXRpY31kaXYuQ29kZU1pcnJvci1jdXJzb3Jze3Zpc2liaWxpdHk6aGlkZGVuO3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6M30uQ29kZU1pcnJvci1mb2N1c2VkIGRpdi5Db2RlTWlycm9yLWN1cnNvcnMsZGl2LkNvZGVNaXJyb3ItZHJhZ2N1cnNvcnN7dmlzaWJpbGl0eTp2aXNpYmxlfS5Db2RlTWlycm9yLXNlbGVjdGVke2JhY2tncm91bmQ6I2Q5ZDlkOX0uQ29kZU1pcnJvci1mb2N1c2VkIC5Db2RlTWlycm9yLXNlbGVjdGVkLC5Db2RlTWlycm9yLWxpbmU6OnNlbGVjdGlvbiwuQ29kZU1pcnJvci1saW5lPnNwYW46OnNlbGVjdGlvbiwuQ29kZU1pcnJvci1saW5lPnNwYW4+c3Bhbjo6c2VsZWN0aW9ue2JhY2tncm91bmQ6I2Q3ZDRmMH0uQ29kZU1pcnJvci1jcm9zc2hhaXJ7Y3Vyc29yOmNyb3NzaGFpcn0uQ29kZU1pcnJvci1saW5lOjotbW96LXNlbGVjdGlvbiwuQ29kZU1pcnJvci1saW5lPnNwYW46Oi1tb3otc2VsZWN0aW9uLC5Db2RlTWlycm9yLWxpbmU+c3Bhbj5zcGFuOjotbW96LXNlbGVjdGlvbntiYWNrZ3JvdW5kOiNkN2Q0ZjB9LmNtLXNlYXJjaGluZ3tiYWNrZ3JvdW5kOiNmZmE7YmFja2dyb3VuZDpyZ2JhKDI1NSwyNTUsMCwuNCl9LmNtLWZvcmNlLWJvcmRlcntwYWRkaW5nLXJpZ2h0Oi4xcHh9QG1lZGlhIHByaW50ey5Db2RlTWlycm9yIGRpdi5Db2RlTWlycm9yLWN1cnNvcnN7dmlzaWJpbGl0eTpoaWRkZW59fS5jbS10YWItd3JhcC1oYWNrOmFmdGVye2NvbnRlbnQ6Jyd9c3Bhbi5Db2RlTWlycm9yLXNlbGVjdGVkdGV4dHtiYWNrZ3JvdW5kOjAgMH0uQ29kZU1pcnJvcntoZWlnaHQ6YXV0bzttaW4taGVpZ2h0OjMwMHB4O2JvcmRlcjoxcHggc29saWQgI2RkZDtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjRweDtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czo0cHg7cGFkZGluZzoxMHB4O2ZvbnQ6aW5oZXJpdDt6LWluZGV4OjF9LkNvZGVNaXJyb3Itc2Nyb2xse21pbi1oZWlnaHQ6MzAwcHh9LkNvZGVNaXJyb3ItZnVsbHNjcmVlbntiYWNrZ3JvdW5kOiNmZmY7cG9zaXRpb246Zml4ZWQhaW1wb3J0YW50O3RvcDo1MHB4O2xlZnQ6MDtyaWdodDowO2JvdHRvbTowO2hlaWdodDphdXRvO3otaW5kZXg6OX0uQ29kZU1pcnJvci1zaWRlZHt3aWR0aDo1MCUhaW1wb3J0YW50fS5lZGl0b3ItdG9vbGJhcntwb3NpdGlvbjpyZWxhdGl2ZTtvcGFjaXR5Oi42Oy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7LW8tdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO3BhZGRpbmc6MCAxMHB4O2JvcmRlci10b3A6MXB4IHNvbGlkICNiYmI7Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkICNiYmI7Ym9yZGVyLXJpZ2h0OjFweCBzb2xpZCAjYmJiO2JvcmRlci10b3AtbGVmdC1yYWRpdXM6NHB4O2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjRweH0uZWRpdG9yLXRvb2xiYXI6YWZ0ZXIsLmVkaXRvci10b29sYmFyOmJlZm9yZXtkaXNwbGF5OmJsb2NrO2NvbnRlbnQ6JyAnO2hlaWdodDoxcHh9LmVkaXRvci10b29sYmFyOmJlZm9yZXttYXJnaW4tYm90dG9tOjhweH0uZWRpdG9yLXRvb2xiYXI6YWZ0ZXJ7bWFyZ2luLXRvcDo4cHh9LmVkaXRvci10b29sYmFyOmhvdmVyLC5lZGl0b3Itd3JhcHBlciBpbnB1dC50aXRsZTpmb2N1cywuZWRpdG9yLXdyYXBwZXIgaW5wdXQudGl0bGU6aG92ZXJ7b3BhY2l0eTouOH0uZWRpdG9yLXRvb2xiYXIuZnVsbHNjcmVlbnt3aWR0aDoxMDAlO2hlaWdodDo1MHB4O292ZXJmbG93LXg6YXV0bztvdmVyZmxvdy15OmhpZGRlbjt3aGl0ZS1zcGFjZTpub3dyYXA7cGFkZGluZy10b3A6MTBweDtwYWRkaW5nLWJvdHRvbToxMHB4O2JveC1zaXppbmc6Ym9yZGVyLWJveDtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyOjA7cG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO29wYWNpdHk6MTt6LWluZGV4Ojl9LmVkaXRvci10b29sYmFyLmZ1bGxzY3JlZW46OmJlZm9yZXt3aWR0aDoyMHB4O2hlaWdodDo1MHB4O2JhY2tncm91bmQ6LW1vei1saW5lYXItZ3JhZGllbnQobGVmdCxyZ2JhKDI1NSwyNTUsMjU1LDEpIDAscmdiYSgyNTUsMjU1LDI1NSwwKSAxMDAlKTtiYWNrZ3JvdW5kOi13ZWJraXQtZ3JhZGllbnQobGluZWFyLGxlZnQgdG9wLHJpZ2h0IHRvcCxjb2xvci1zdG9wKDAscmdiYSgyNTUsMjU1LDI1NSwxKSksY29sb3Itc3RvcCgxMDAlLHJnYmEoMjU1LDI1NSwyNTUsMCkpKTtiYWNrZ3JvdW5kOi13ZWJraXQtbGluZWFyLWdyYWRpZW50KGxlZnQscmdiYSgyNTUsMjU1LDI1NSwxKSAwLHJnYmEoMjU1LDI1NSwyNTUsMCkgMTAwJSk7YmFja2dyb3VuZDotby1saW5lYXItZ3JhZGllbnQobGVmdCxyZ2JhKDI1NSwyNTUsMjU1LDEpIDAscmdiYSgyNTUsMjU1LDI1NSwwKSAxMDAlKTtiYWNrZ3JvdW5kOi1tcy1saW5lYXItZ3JhZGllbnQobGVmdCxyZ2JhKDI1NSwyNTUsMjU1LDEpIDAscmdiYSgyNTUsMjU1LDI1NSwwKSAxMDAlKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCh0byByaWdodCxyZ2JhKDI1NSwyNTUsMjU1LDEpIDAscmdiYSgyNTUsMjU1LDI1NSwwKSAxMDAlKTtwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7bWFyZ2luOjA7cGFkZGluZzowfS5lZGl0b3ItdG9vbGJhci5mdWxsc2NyZWVuOjphZnRlcnt3aWR0aDoyMHB4O2hlaWdodDo1MHB4O2JhY2tncm91bmQ6LW1vei1saW5lYXItZ3JhZGllbnQobGVmdCxyZ2JhKDI1NSwyNTUsMjU1LDApIDAscmdiYSgyNTUsMjU1LDI1NSwxKSAxMDAlKTtiYWNrZ3JvdW5kOi13ZWJraXQtZ3JhZGllbnQobGluZWFyLGxlZnQgdG9wLHJpZ2h0IHRvcCxjb2xvci1zdG9wKDAscmdiYSgyNTUsMjU1LDI1NSwwKSksY29sb3Itc3RvcCgxMDAlLHJnYmEoMjU1LDI1NSwyNTUsMSkpKTtiYWNrZ3JvdW5kOi13ZWJraXQtbGluZWFyLWdyYWRpZW50KGxlZnQscmdiYSgyNTUsMjU1LDI1NSwwKSAwLHJnYmEoMjU1LDI1NSwyNTUsMSkgMTAwJSk7YmFja2dyb3VuZDotby1saW5lYXItZ3JhZGllbnQobGVmdCxyZ2JhKDI1NSwyNTUsMjU1LDApIDAscmdiYSgyNTUsMjU1LDI1NSwxKSAxMDAlKTtiYWNrZ3JvdW5kOi1tcy1saW5lYXItZ3JhZGllbnQobGVmdCxyZ2JhKDI1NSwyNTUsMjU1LDApIDAscmdiYSgyNTUsMjU1LDI1NSwxKSAxMDAlKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCh0byByaWdodCxyZ2JhKDI1NSwyNTUsMjU1LDApIDAscmdiYSgyNTUsMjU1LDI1NSwxKSAxMDAlKTtwb3NpdGlvbjpmaXhlZDt0b3A6MDtyaWdodDowO21hcmdpbjowO3BhZGRpbmc6MH0uZWRpdG9yLXRvb2xiYXIgYXtkaXNwbGF5OmlubGluZS1ibG9jazt0ZXh0LWFsaWduOmNlbnRlcjt0ZXh0LWRlY29yYXRpb246bm9uZSFpbXBvcnRhbnQ7Y29sb3I6IzJjM2U1MCFpbXBvcnRhbnQ7d2lkdGg6MzBweDtoZWlnaHQ6MzBweDttYXJnaW46MDtib3JkZXI6MXB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1yYWRpdXM6M3B4O2N1cnNvcjpwb2ludGVyfS5lZGl0b3ItdG9vbGJhciBhLmFjdGl2ZSwuZWRpdG9yLXRvb2xiYXIgYTpob3ZlcntiYWNrZ3JvdW5kOiNmY2ZjZmM7Ym9yZGVyLWNvbG9yOiM5NWE1YTZ9LmVkaXRvci10b29sYmFyIGE6YmVmb3Jle2xpbmUtaGVpZ2h0OjMwcHh9LmVkaXRvci10b29sYmFyIGkuc2VwYXJhdG9ye2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjA7Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkICNkOWQ5ZDk7Ym9yZGVyLXJpZ2h0OjFweCBzb2xpZCAjZmZmO2NvbG9yOnRyYW5zcGFyZW50O3RleHQtaW5kZW50Oi0xMHB4O21hcmdpbjowIDZweH0uZWRpdG9yLXRvb2xiYXIgYS5mYS1oZWFkZXIteDphZnRlcntmb250LWZhbWlseTpBcmlhbCwiSGVsdmV0aWNhIE5ldWUiLEhlbHZldGljYSxzYW5zLXNlcmlmO2ZvbnQtc2l6ZTo2NSU7dmVydGljYWwtYWxpZ246dGV4dC1ib3R0b207cG9zaXRpb246cmVsYXRpdmU7dG9wOjJweH0uZWRpdG9yLXRvb2xiYXIgYS5mYS1oZWFkZXItMTphZnRlcntjb250ZW50OiIxIn0uZWRpdG9yLXRvb2xiYXIgYS5mYS1oZWFkZXItMjphZnRlcntjb250ZW50OiIyIn0uZWRpdG9yLXRvb2xiYXIgYS5mYS1oZWFkZXItMzphZnRlcntjb250ZW50OiIzIn0uZWRpdG9yLXRvb2xiYXIgYS5mYS1oZWFkZXItYmlnZ2VyOmFmdGVye2NvbnRlbnQ6IuKWsiJ9LmVkaXRvci10b29sYmFyIGEuZmEtaGVhZGVyLXNtYWxsZXI6YWZ0ZXJ7Y29udGVudDoi4pa8In0uZWRpdG9yLXRvb2xiYXIuZGlzYWJsZWQtZm9yLXByZXZpZXcgYTpub3QoLm5vLWRpc2FibGUpe3BvaW50ZXItZXZlbnRzOm5vbmU7YmFja2dyb3VuZDojZmZmO2JvcmRlci1jb2xvcjp0cmFuc3BhcmVudDt0ZXh0LXNoYWRvdzppbmhlcml0fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDo3MDBweCl7LmVkaXRvci10b29sYmFyIGEubm8tbW9iaWxle2Rpc3BsYXk6bm9uZX19LmVkaXRvci1zdGF0dXNiYXJ7cGFkZGluZzo4cHggMTBweDtmb250LXNpemU6MTJweDtjb2xvcjojOTU5Njk0O3RleHQtYWxpZ246cmlnaHR9LmVkaXRvci1zdGF0dXNiYXIgc3BhbntkaXNwbGF5OmlubGluZS1ibG9jazttaW4td2lkdGg6NGVtO21hcmdpbi1sZWZ0OjFlbX0uZWRpdG9yLXByZXZpZXcsLmVkaXRvci1wcmV2aWV3LXNpZGV7cGFkZGluZzoxMHB4O2JhY2tncm91bmQ6I2ZhZmFmYTtvdmVyZmxvdzphdXRvO2Rpc3BsYXk6bm9uZTtib3gtc2l6aW5nOmJvcmRlci1ib3h9LmVkaXRvci1zdGF0dXNiYXIgLmxpbmVzOmJlZm9yZXtjb250ZW50OidsaW5lczogJ30uZWRpdG9yLXN0YXR1c2JhciAud29yZHM6YmVmb3Jle2NvbnRlbnQ6J3dvcmRzOiAnfS5lZGl0b3Itc3RhdHVzYmFyIC5jaGFyYWN0ZXJzOmJlZm9yZXtjb250ZW50OidjaGFyYWN0ZXJzOiAnfS5lZGl0b3ItcHJldmlld3twb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3RvcDowO2xlZnQ6MDt6LWluZGV4Ojd9LmVkaXRvci1wcmV2aWV3LXNpZGV7cG9zaXRpb246Zml4ZWQ7Ym90dG9tOjA7d2lkdGg6NTAlO3RvcDo1MHB4O3JpZ2h0OjA7ei1pbmRleDo5O2JvcmRlcjoxcHggc29saWQgI2RkZH0uZWRpdG9yLXByZXZpZXctYWN0aXZlLC5lZGl0b3ItcHJldmlldy1hY3RpdmUtc2lkZXtkaXNwbGF5OmJsb2NrfS5lZGl0b3ItcHJldmlldy1zaWRlPnAsLmVkaXRvci1wcmV2aWV3PnB7bWFyZ2luLXRvcDowfS5lZGl0b3ItcHJldmlldyBwcmUsLmVkaXRvci1wcmV2aWV3LXNpZGUgcHJle2JhY2tncm91bmQ6I2VlZTttYXJnaW4tYm90dG9tOjEwcHh9LmVkaXRvci1wcmV2aWV3IHRhYmxlIHRkLC5lZGl0b3ItcHJldmlldyB0YWJsZSB0aCwuZWRpdG9yLXByZXZpZXctc2lkZSB0YWJsZSB0ZCwuZWRpdG9yLXByZXZpZXctc2lkZSB0YWJsZSB0aHtib3JkZXI6MXB4IHNvbGlkICNkZGQ7cGFkZGluZzo1cHh9LkNvZGVNaXJyb3IgLkNvZGVNaXJyb3ItY29kZSAuY20tdGFne2NvbG9yOiM2M2EzNWN9LkNvZGVNaXJyb3IgLkNvZGVNaXJyb3ItY29kZSAuY20tYXR0cmlidXRle2NvbG9yOiM3OTVkYTN9LkNvZGVNaXJyb3IgLkNvZGVNaXJyb3ItY29kZSAuY20tc3RyaW5ne2NvbG9yOiMxODM2OTF9LkNvZGVNaXJyb3IgLkNvZGVNaXJyb3Itc2VsZWN0ZWR7YmFja2dyb3VuZDojZDlkOWQ5fS5Db2RlTWlycm9yIC5Db2RlTWlycm9yLWNvZGUgLmNtLWhlYWRlci0xe2ZvbnQtc2l6ZToyMDAlO2xpbmUtaGVpZ2h0OjIwMCV9LkNvZGVNaXJyb3IgLkNvZGVNaXJyb3ItY29kZSAuY20taGVhZGVyLTJ7Zm9udC1zaXplOjE2MCU7bGluZS1oZWlnaHQ6MTYwJX0uQ29kZU1pcnJvciAuQ29kZU1pcnJvci1jb2RlIC5jbS1oZWFkZXItM3tmb250LXNpemU6MTI1JTtsaW5lLWhlaWdodDoxMjUlfS5Db2RlTWlycm9yIC5Db2RlTWlycm9yLWNvZGUgLmNtLWhlYWRlci00e2ZvbnQtc2l6ZToxMTAlO2xpbmUtaGVpZ2h0OjExMCV9LkNvZGVNaXJyb3IgLkNvZGVNaXJyb3ItY29kZSAuY20tY29tbWVudHtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjA1KTtib3JkZXItcmFkaXVzOjJweH0uQ29kZU1pcnJvciAuQ29kZU1pcnJvci1jb2RlIC5jbS1saW5re2NvbG9yOiM3ZjhjOGR9LkNvZGVNaXJyb3IgLkNvZGVNaXJyb3ItY29kZSAuY20tdXJse2NvbG9yOiNhYWIyYjN9LkNvZGVNaXJyb3IgLkNvZGVNaXJyb3ItY29kZSAuY20tc3RyaWtldGhyb3VnaHt0ZXh0LWRlY29yYXRpb246bGluZS10aHJvdWdofS5Db2RlTWlycm9yIC5Db2RlTWlycm9yLXBsYWNlaG9sZGVye29wYWNpdHk6LjV9LkNvZGVNaXJyb3IgLmNtLXNwZWxsLWVycm9yOm5vdCguY20tdXJsKTpub3QoLmNtLWNvbW1lbnQpOm5vdCguY20tdGFnKTpub3QoLmNtLXdvcmQpe2JhY2tncm91bmQ6cmdiYSgyNTUsMCwwLC4xNSl9');
}


function resource_88b57a5c8ca3926b82c144324e9c01a2() {
    return base64_decode('');
}


function resource_b5224402a7c86bd91173aa4a45d1b751() {
    return base64_decode('');
}


function resource_26ea431450ddec82e12665459ea890a0() {
    return base64_decode('Ly8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnMNCi8vIERpc3RyaWJ1dGVkIHVuZGVyIGFuIE1JVCBsaWNlbnNlOiBodHRwOi8vY29kZW1pcnJvci5uZXQvTElDRU5TRQ0KDQooZnVuY3Rpb24obW9kKSB7DQogICAgaWYgKHR5cGVvZiBleHBvcnRzID09ICJvYmplY3QiICYmIHR5cGVvZiBtb2R1bGUgPT0gIm9iamVjdCIpIC8vIENvbW1vbkpTDQogICAgICAgIG1vZChyZXF1aXJlKCIuLi8uLi9saWIvY29kZW1pcnJvciIpKTsNCiAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09ICJmdW5jdGlvbiIgJiYgZGVmaW5lLmFtZCkgLy8gQU1EDQogICAgICAgIGRlZmluZShbIi4uLy4uL2xpYi9jb2RlbWlycm9yIl0sIG1vZCk7DQogICAgZWxzZSAvLyBQbGFpbiBicm93c2VyIGVudg0KICAgICAgICBtb2QoQ29kZU1pcnJvcik7DQp9KShmdW5jdGlvbihDb2RlTWlycm9yKSB7DQogICAgInVzZSBzdHJpY3QiOw0KDQogICAgdmFyIGxpc3RSRSA9IC9eKFxzKikoPls+IF0qfC0gXFtbeCBdXF1cc3xbKistXVxzfChcZCspKFsuKV0pKShccyopLywNCiAgICAgICAgZW1wdHlMaXN0UkUgPSAvXihccyopKD5bPiBdKnwtIFxbW3ggXVxdfFsqKy1dfChcZCspWy4pXSkoXHMqKSQvLA0KICAgICAgICB1bm9yZGVyZWRMaXN0UkUgPSAvWyorLV1ccy87DQoNCiAgICBDb2RlTWlycm9yLmNvbW1hbmRzLm5ld2xpbmVBbmRJbmRlbnRDb250aW51ZU1hcmtkb3duTGlzdCA9IGZ1bmN0aW9uKGNtKSB7DQogICAgICAgIGlmIChjbS5nZXRPcHRpb24oImRpc2FibGVJbnB1dCIpKSByZXR1cm4gQ29kZU1pcnJvci5QYXNzOw0KICAgICAgICB2YXIgcmFuZ2VzID0gY20ubGlzdFNlbGVjdGlvbnMoKSwgcmVwbGFjZW1lbnRzID0gW107DQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICB2YXIgcG9zID0gcmFuZ2VzW2ldLmhlYWQ7DQogICAgICAgICAgICB2YXIgZW9sU3RhdGUgPSBjbS5nZXRTdGF0ZUFmdGVyKHBvcy5saW5lKTsNCiAgICAgICAgICAgIHZhciBpbkxpc3QgPSBlb2xTdGF0ZS5saXN0ICE9PSBmYWxzZTsNCiAgICAgICAgICAgIHZhciBpblF1b3RlID0gZW9sU3RhdGUucXVvdGUgIT09IDA7DQoNCiAgICAgICAgICAgIHZhciBsaW5lID0gY20uZ2V0TGluZShwb3MubGluZSksIG1hdGNoID0gbGlzdFJFLmV4ZWMobGluZSk7DQogICAgICAgICAgICBpZiAoIXJhbmdlc1tpXS5lbXB0eSgpIHx8ICghaW5MaXN0ICYmICFpblF1b3RlKSB8fCAhbWF0Y2gpIHsNCiAgICAgICAgICAgICAgICBjbS5leGVjQ29tbWFuZCgibmV3bGluZUFuZEluZGVudCIpOw0KICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChlbXB0eUxpc3RSRS50ZXN0KGxpbmUpKSB7DQogICAgICAgICAgICAgICAgY20ucmVwbGFjZVJhbmdlKCIiLCB7DQogICAgICAgICAgICAgICAgICAgIGxpbmU6IHBvcy5saW5lLCBjaDogMA0KICAgICAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICAgICAgbGluZTogcG9zLmxpbmUsIGNoOiBwb3MuY2ggKyAxDQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnRzW2ldID0gIlxuIjsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgdmFyIGluZGVudCA9IG1hdGNoWzFdLCBhZnRlciA9IG1hdGNoWzVdOw0KICAgICAgICAgICAgICAgIHZhciBidWxsZXQgPSB1bm9yZGVyZWRMaXN0UkUudGVzdChtYXRjaFsyXSkgfHwgbWF0Y2hbMl0uaW5kZXhPZigiPiIpID49IDANCiAgICAgICAgICAgICAgICAgICAgPyBtYXRjaFsyXS5yZXBsYWNlKCJ4IiwgIiAiKQ0KICAgICAgICAgICAgICAgICAgICA6IChwYXJzZUludChtYXRjaFszXSwgMTApICsgMSkgKyBtYXRjaFs0XTsNCg0KICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50c1tpXSA9ICJcbiIgKyBpbmRlbnQgKyBidWxsZXQgKyBhZnRlcjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGNtLnJlcGxhY2VTZWxlY3Rpb25zKHJlcGxhY2VtZW50cyk7DQogICAgfTsNCn0pOw==');
}


function resource_14d2f72548c683c8191c0bcc303e6f6d() {
    return base64_decode('LyohDQogKiB0b2MgLSBqUXVlcnkgVGFibGUgb2YgQ29udGVudHMgUGx1Z2luDQogKiB2MC4zLjINCiAqIGh0dHA6Ly9wcm9qZWN0cy5qZ2EubWUvdG9jLw0KICogY29weXJpZ2h0IEdyZWcgQWxsZW4gMjAxNA0KICogTUlUIExpY2Vuc2UNCiAqLw0KIWZ1bmN0aW9uKGEpe2EuZm4uc21vb3RoU2Nyb2xsZXI9ZnVuY3Rpb24oYil7Yj1hLmV4dGVuZCh7fSxhLmZuLnNtb290aFNjcm9sbGVyLmRlZmF1bHRzLGIpO3ZhciBjPWEodGhpcyk7cmV0dXJuIGEoYi5zY3JvbGxFbCkuYW5pbWF0ZSh7c2Nyb2xsVG9wOmMub2Zmc2V0KCkudG9wLWEoYi5zY3JvbGxFbCkub2Zmc2V0KCkudG9wLWIub2Zmc2V0fSxiLnNwZWVkLGIuZWFzZSxmdW5jdGlvbigpe3ZhciBhPWMuYXR0cigiaWQiKTthLmxlbmd0aCYmKGhpc3RvcnkucHVzaFN0YXRlP2hpc3RvcnkucHVzaFN0YXRlKG51bGwsbnVsbCwiIyIrYSk6ZG9jdW1lbnQubG9jYXRpb24uaGFzaD1hKSxjLnRyaWdnZXIoInNtb290aFNjcm9sbGVyQ29tcGxldGUiKX0pLHRoaXN9LGEuZm4uc21vb3RoU2Nyb2xsZXIuZGVmYXVsdHM9e3NwZWVkOjQwMCxlYXNlOiJzd2luZyIsc2Nyb2xsRWw6ImJvZHksaHRtbCIsb2Zmc2V0OjB9LGEoImJvZHkiKS5vbigiY2xpY2siLCJbZGF0YS1zbW9vdGhzY3JvbGxlcl0iLGZ1bmN0aW9uKGIpe2IucHJldmVudERlZmF1bHQoKTt2YXIgYz1hKHRoaXMpLmF0dHIoImhyZWYiKTswPT09Yy5pbmRleE9mKCIjIikmJmEoYykuc21vb3RoU2Nyb2xsZXIoKX0pfShqUXVlcnkpLGZ1bmN0aW9uKGEpe3ZhciBiPXt9O2EuZm4udG9jPWZ1bmN0aW9uKGIpe3ZhciBjLGQ9dGhpcyxlPWEuZXh0ZW5kKHt9LGpRdWVyeS5mbi50b2MuZGVmYXVsdHMsYiksZj1hKGUuY29udGFpbmVyKSxnPWEoZS5zZWxlY3RvcnMsZiksaD1bXSxpPWUuYWN0aXZlQ2xhc3Msaj1mdW5jdGlvbihiLGMpe2lmKGUuc21vb3RoU2Nyb2xsaW5nJiYiZnVuY3Rpb24iPT10eXBlb2YgZS5zbW9vdGhTY3JvbGxpbmcpe2IucHJldmVudERlZmF1bHQoKTt2YXIgZj1hKGIudGFyZ2V0KS5hdHRyKCJocmVmIik7ZS5zbW9vdGhTY3JvbGxpbmcoZixlLGMpfWEoImxpIixkKS5yZW1vdmVDbGFzcyhpKSxhKGIudGFyZ2V0KS5wYXJlbnQoKS5hZGRDbGFzcyhpKX0saz1mdW5jdGlvbigpe2MmJmNsZWFyVGltZW91dChjKSxjPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtmb3IodmFyIGIsYz1hKHdpbmRvdykuc2Nyb2xsVG9wKCksZj1OdW1iZXIuTUFYX1ZBTFVFLGc9MCxqPTAsaz1oLmxlbmd0aDtrPmo7aisrKXt2YXIgbD1NYXRoLmFicyhoW2pdLWMpO2Y+bCYmKGc9aixmPWwpfWEoImxpIixkKS5yZW1vdmVDbGFzcyhpKSxiPWEoImxpOmVxKCIrZysiKSIsZCkuYWRkQ2xhc3MoaSksZS5vbkhpZ2hsaWdodChiKX0sNTApfTtyZXR1cm4gZS5oaWdobGlnaHRPblNjcm9sbCYmKGEod2luZG93KS5iaW5kKCJzY3JvbGwiLGspLGsoKSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGI9YSh0aGlzKSxjPWEoZS5saXN0VHlwZSk7Zy5lYWNoKGZ1bmN0aW9uKGQsZil7dmFyIGc9YShmKTtoLnB1c2goZy5vZmZzZXQoKS50b3AtZS5oaWdobGlnaHRPZmZzZXQpO3ZhciBpPWUuYW5jaG9yTmFtZShkLGYsZS5wcmVmaXgpO2lmKGYuaWQhPT1pKXthKCI8c3Bhbi8+IikuYXR0cigiaWQiLGkpLmluc2VydEJlZm9yZShnKX12YXIgbD1hKCI8YS8+IikudGV4dChlLmhlYWRlclRleHQoZCxmLGcpKS5hdHRyKCJocmVmIiwiIyIraSkuYmluZCgiY2xpY2siLGZ1bmN0aW9uKGMpe2Eod2luZG93KS51bmJpbmQoInNjcm9sbCIsayksaihjLGZ1bmN0aW9uKCl7YSh3aW5kb3cpLmJpbmQoInNjcm9sbCIsayl9KSxiLnRyaWdnZXIoInNlbGVjdGVkIixhKHRoaXMpLmF0dHIoImhyZWYiKSl9KSxtPWEoIjxsaS8+IikuYWRkQ2xhc3MoZS5pdGVtQ2xhc3MoZCxmLGcsZS5wcmVmaXgpKS5hcHBlbmQobCk7Yy5hcHBlbmQobSl9KSxiLmh0bWwoYyl9KX0salF1ZXJ5LmZuLnRvYy5kZWZhdWx0cz17Y29udGFpbmVyOiJib2R5IixsaXN0VHlwZToiPHVsLz4iLHNlbGVjdG9yczoiaDEsaDIsaDMiLHNtb290aFNjcm9sbGluZzpmdW5jdGlvbihiLGMsZCl7YShiKS5zbW9vdGhTY3JvbGxlcih7b2Zmc2V0OmMuc2Nyb2xsVG9PZmZzZXR9KS5vbigic21vb3RoU2Nyb2xsZXJDb21wbGV0ZSIsZnVuY3Rpb24oKXtkKCl9KX0sc2Nyb2xsVG9PZmZzZXQ6MCxwcmVmaXg6InRvYyIsYWN0aXZlQ2xhc3M6InRvYy1hY3RpdmUiLG9uSGlnaGxpZ2h0OmZ1bmN0aW9uKCl7fSxoaWdobGlnaHRPblNjcm9sbDohMCxoaWdobGlnaHRPZmZzZXQ6MTAwLGFuY2hvck5hbWU6ZnVuY3Rpb24oYyxkLGUpe2lmKGQuaWQubGVuZ3RoKXJldHVybiBkLmlkO3ZhciBmPWEoZCkudGV4dCgpLnJlcGxhY2UoL1teYS16MC05XS9naSwiICIpLnJlcGxhY2UoL1xzKy9nLCItIikudG9Mb3dlckNhc2UoKTtpZihiW2ZdKXtmb3IodmFyIGc9MjtiW2YrZ107KWcrKztmPWYrIi0iK2d9cmV0dXJuIGJbZl09ITAsZSsiLSIrZn0saGVhZGVyVGV4dDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGMudGV4dCgpfSxpdGVtQ2xhc3M6ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIGQrIi0iK2NbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpfX19KGpRdWVyeSk7');
}


function resource_40ac8d6295fe2816f6b11a741a29a262() {
    return base64_decode('');
}


function resource_de6111cfa3ef50cb533c22819f26c4d3() {
    return base64_decode('');
}


function resource_37985b64af1bdcd122088bb166b9a3e9() {
    return base64_decode('');
}


function resource_4aee6e3a3f21404e70f423b056813084() {
    return base64_decode('');
}


function resource_be2bea665c2d59bf5897cd3e2325d9d8() {
    return base64_decode('');
}


function resource_01780718220c1e11674f19e05d7e29b2() {
    return base64_decode('');
}


function view_c474432f8da5706b55cded8c1409f237(array $data = []) {
    extract($data);
    ob_start(); ?>
    <?php
    $tm = $app->getThemeManager();
?>
<!DOCTYPE html>
<html>
    <head>
        <title>maki</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link href='<?php echo $app->getResourceUrl($tm->getStylesheetPath($tm->getActiveStylesheet())) ?>' rel='stylesheet'>
        <script src="<?php echo $app->getResourceUrl('resources/jquery.js') ?>"></script>
    </head>
    <body class='login-page'>
    <div>
        <form>
            <div class="form-group">
                <input type="text" placeholder="Username">
            </div>
            <div class="form-group">
                <input type="password" placeholder="Password">
            </div>
            <div class="form-group checkbox">
                <label for="field-remember_me"><input type="checkbox" id="field-remember_me"> Remember me</label>
            </div>
            <div class="form-group">
                <button type="submit">login</button>
            </div>
        </form>
    </div>
    <script>
        $(function() {
            'use strict';

            var $form = $('form'),
                $name = $('input[type=text]'),
                $password = $('input[type=password]'),
                $remember = $('input[type=checkbox]');

            $form.on('submit', function(e) {
                e.preventDefault();

                $.ajax({
                    url: '?auth=1',
                    type: 'post',
                    data: {
                        username: $name.val(),
                        password: $password.val(),
                        remember: $remember[0].checked ? 1 : 0
                    },
                    success: function() {
                        window.location.reload();
                    },
                    error: function(xhr) {
                        $form.find('.username-form-error').remove();
                        $form.append('<p class="username-form-error">'+xhr.responseJSON.error+'</p>');
                    }
                });

                return false;
            });

        });
    </script>
    </body>
</html>
    <?php
    $content = ob_get_contents();
    ob_end_clean();
    return $content;
}


function view_4cc347ed786a2b22334b44fd54e1f5ba(array $data = []) {
    extract($data);
    ob_start(); ?>
    <?php
/**
 * @type \Maki\Maki $app
 * @type \Maki\File\Markdown $page
 * @type \Maki\File\Markdown $nav
 */
?>
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link href="<?php echo $app->getResourceUrl($stylesheet) ?>" rel="stylesheet">
        <script src="<?php echo $app->getResourceUrl('resources/jquery.js') ?>"></script>
        <script src="<?php echo $app->getResourceUrl('resources/prism.js') ?>"></script>
        <script src="<?php echo $app->getResourceUrl('resources/toc.min.js') ?>"></script>
        <script src="<?php echo $app->getResourceUrl('resources/mermaid.min.js') ?>"></script>
        <script>
            var __PAGE_PATH__ = '<?php echo $page->getFilePath() ?>';
        </script>
        <?php if ($editing): ?>
            <link href="<?php echo $app->getResourceUrl('resources/simplemde.min.css') ?>" rel="stylesheet">
            <script src="<?php echo $app->getResourceUrl('resources/simplemde.min.js') ?>"></script>
<!--            <link href="--><?php //echo $app->getResourceUrl('resources/codemirror.css') ?><!--" rel='stylesheet'>-->
<!--            <script src="--><?php //echo $app->getResourceUrl('resources/codemirror.js') ?><!--"></script>-->
<!--            <script src="--><?php //echo $app->getResourceUrl('resources/codemirror-continuelist.js') ?><!--"></script>-->
<!--            <script src="--><?php //echo $app->getResourceUrl('resources/codemirror-xml.js') ?><!--"></script>-->
<!--            <script src="--><?php //echo $app->getResourceUrl('resources/codemirror-markdown.js') ?><!--"></script>-->
<!--            <script src="--><?php //echo $app->getResourceUrl('resources/codemirror-rules.js') ?><!--"></script>-->
        <?php endif ?>
    </head>
    <body class="<?php echo $editing ? 'edit-mode' : '' ?>">
        <div class='container'>
            <header class="header">
                <h2><?php echo $app['main_title'] ?></h2>
                <?php if ($app['users']): ?>
                    <div class="user-actions">
                        hello <a><?php echo $app['user']['username'] ?></a> |
                        <a href="?logout=1">logout</a>
                    </div>
                <?php endif ?>
            </header>
            <div class='nav'>
                <div class='nav-inner'>
                    <?php echo $nav->toHTML() ?>
                    <?php if ($editable or $viewable): ?>
                        <div class='page-actions'>
                            <a href='<?php echo $nav->getUrl() ?>?edit=1' class='btn btn-xs btn-info pull-right'><?php echo $editButton ?></a>
                        </div>
                    <?php endif ?>
                </div>
            </div>
            <div class='content'>
                <ol class="breadcrumb">
                    <?php foreach ($page->getBreadcrumb() as $link): ?>
                        <li <?php echo $link['active'] ? 'class="active"' : '' ?>>
                            <?php if ($link['url']): ?>
                                <a href="<?php echo $link['url'] ?>"><?php echo $link['text'] ?></a>
                            <?php else: ?>
                                <?php echo $link['text'] ?>
                            <?php endif ?>
                        </li>
                    <?php endforeach ?>
                </ol>
                <div class='content-inner'>
                    <?php if ($editing): ?>
                        <div class='page-actions'>
                            <a href='<?php echo $page->getUrl() ?>' class='btn btn-xs btn-info'>back</a>
                            <?php if ($editable and $page->isNotLocked()): ?>
                                <a class='btn btn-xs btn-success save-btn'>save</a>
                                <span class='saved-info'>Document saved.</span>
                            <?php endif ?>

                            <?php if ($page->isLocked()): ?>
                                <span class='saved-info' style='display: inline-block'>Someone else is editing this document now.</span>
                            <?php endif ?>
                        </div>

                        <?php if ($editable and $page->isNotLocked()): ?>
                            <textarea id='textarea' class='textarea editor-textarea'><?php echo $page->getContent() ?></textarea>
                        <?php endif ?>
                    <?php else: ?>
                        <?php echo $page->toHTML() ?>

                        <?php if ($editable or $viewable): ?>
                            <div class='page-actions clearfix'>
                                <a href='<?php echo $page->getUrl() ?>?edit=1' class='btn btn-xs btn-info pull-right'><?php echo $editButton ?></a>
                                <?php if ($editable): ?>
                                    <a href='<?php echo $page->getUrl() ?>?delete=1' data-confirm='Are you sure you want delete this page?' class='btn btn-xs btn-danger pull-right'>delete</a>
                                <?php endif ?>
                            </div>
                        <?php endif ?>

                    <?php endif ?>
                </div>
            </div>
            <footer class='footer text-right'>
                <a class="btn btn-info" href="?ctrl=page&action=archive">download archive</a>
                <div class='themes'>
                    <select>
                        <?php foreach ($app->getThemeManager()->getStylesheets() as $name => $url): ?>
                            <option value='<?php echo $name ?>' <?php echo $name == $activeStylesheet ? 'selected="selected"' : '' ?>><?php echo $name ?></option>
                        <?php endforeach ?>
                    </select>
                </div>
                <p class='copyrights'><a href='http://emve.org/maki' target='_blank' class='maki-name'><strong>ma</strong>ki</a> created by <a href='http://emve.org/' target='_blank' class='darkcinnamon-name'>emve</a></p>
            </footer>
        </div>
        <script>
            <?php if ($editing and $editable and $page->isNotLocked()): ?>
            var $saveBtns = $('.save-btn'),
                $saved = $('.saved-info'),
                editor;

            $saved.hide();

            function save() {
                $.ajax({
                    url: '<?php $page->getUrl() ?>?save=1',
                    method: 'post',
                    data: {
                        content:  editor.value()//$('#textarea').val()
                    },
                    success: function() {
                        $saveBtns.attr('disabled', 'disabled');
                        //$saved.show();
                        setTimeout(function() { save(); }, 5000);
                    }
                });
            };

            var editing = <?php echo var_export($editing, true) ?>;

            if (editing) {

                editor = new SimpleMDE({
                    element: document.getElementById('textarea'),
                    spellChecker: false,
                    toolbar: false
                });
                editor.codemirror.on('change', function() {
                    $saveBtns.removeAttr('disabled');
                });
                editor.codemirror.setOption('rulers', [{ color: '#ccc', column: 80, lineStyle: 'dashed' }]);

//                editor = CodeMirror.fromTextArea(document.getElementById("textarea"), {
//                    mode: 'markdown',
//                    tabSize: 4,
//                    lineNumbers: false,
//                    theme: "3024-day",
//                    extraKeys: {"Enter": "newlineAndIndentContinueMarkdownList"},
//                    rulers: [{ color: '#ccc', column: 80, lineStyle: 'dashed' }]
//                });
//
//                // CodeMirror does not put any class which could determine
//                // what language syntax is selected, so we apply such
//                // class manually.
//                editor.getWrapperElement().className += ' lang-markdown';

                $(document).on('click', '.save-btn', save);

                save();
            }
            <?php endif ?>

            $(document).on('click', '[data-confirm]', function(e) {
                if (confirm($(this).attr('data-confirm'))) {
                    return true;
                } else {
                    e.preventDefault();
                    return false;
                }
            });

            var codeActionsTmpl = '' +
                '<div class="code-actions">' +
                '   <a href="#download" class="code-action-download">download</a>'
            '</div>';

            $('.content').find('pre > code').each(function(index) {
                var $this = $(this);

                if (this.className != '') {
                    this.className = 'language-'+this.className;
                    this.parentNode.className = this.className;
                }

                $(codeActionsTmpl)
                    .find('.code-action-download')
                    .attr('href', '?action=downloadCode&index=' + index)
                    .insertAfter($this.parent());
            });

            Prism.highlightAll();

            $('.themes > select').on('change', function() {
                window.location = '<?php $app->getCurrentUrl() ?>?change_css='+this.value;
            });

            $('.nav-inner [href="/'+__PAGE_PATH__+'"]').closest('li').append('<div id="page-toc"></div>');

            var toc = $('#page-toc');
            $('#page-toc').toc({
                container: '.content-inner',
                selectors: 'h2,h3,h4'
            });

            if ($('>ul', toc).is(':empty')) {
                // Remove table of contents if it is empty
                // ----

                toc.remove();
            } else if (toc.length) {
                // Scroll to nav toc
                $('.nav')[0].scrollTop = toc.position().top;
            }

            mermaid.initialize({ startOnLoad: true });

//            // Toggle headers as it would be sections.
//            $('body').on('click', 'h1, h2, h3, h4, h5, h6', function() {
//                var h = $(this),
//                    visible = !h.hasClass('collapsed');
//
//                if (visible) {
//                    h.addClass('collapsed');
//                } else {
//                    h.removeClass('collapsed');
//                }
//
//                h.nextUntil(this.localName).each(function() {
//                    if (visible) {
//                        this.setAttribute('data-display', this.style.display);
//                        this.style.display = 'none';
//                    } else {
//                        this.style.display = this.getAttribute('data-display');
//                    }
//                });<?php //$app->getCurrentUrl() ?>
//            });
        </script>
    </body>
</html>
    <?php
    $content = ob_get_contents();
    ob_end_clean();
    return $content;
}


}